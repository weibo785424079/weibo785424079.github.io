{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1572350087736},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1572350087736},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1572350087736},{"_id":"themes/landscape/README.md","hash":"7003ae0b773679cdd19c14bc609816e65af5da9c","modified":1572350087736},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1572350087736},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1572350087743},{"_id":"source/_posts/JS中的位运算.md","hash":"5feea3f9b606e4d4f0e72b42967638f86d61d71e","modified":1573108893478},{"_id":"source/_posts/typescript-3-7beta.md","hash":"6dbe64d365dc456aed880b533b1abe3f1857972e","modified":1572423810085},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1572350087737},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1572350087737},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1572350087737},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1572350087737},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1572350087737},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1572350087737},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1572350087737},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1572350087738},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1572350087738},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1572350087738},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1572350087738},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1572350087738},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1572350087742},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1572350087742},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1572350087743},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1572350087743},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1572350087743},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1572350087743},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1572350087743},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1572350087743},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1572350087739},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1572350087739},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1572350087739},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1572350087739},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1572350087739},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1572350087739},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1572350087739},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1572350087740},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1572350087740},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1572350087740},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1572350087741},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1572350087741},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1572350087741},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1572350087742},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1572350087741},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1572350087742},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1572350087746},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1572350087744},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1572350087752},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1572350087753},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1572350087753},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1572350087752},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1572350087753},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1572350087753},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1572350087754},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1572350087755},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1572350087756},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1572350087755},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1572350087756},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1572350087740},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1572350087740},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1572350087740},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1572350087740},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1572350087741},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1572350087741},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1572350087744},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1572350087744},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1572350087744},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1572350087744},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1572350087745},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1572350087745},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1572350087745},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1572350087745},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1572350087745},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1572350087745},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1572350087746},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1572350087746},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1572350087747},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1572350087750},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1572350087747},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1572350087754},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1572350087754},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1572350087754},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1572350087755},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1572350087754},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1572350087754},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1572350087749},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1572350087749},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1572350087752},{"_id":"source/_posts/JS中的位运算/ieee754.png","hash":"15ebf2d340578a9f38ebabbe22ee3c8fb6f4de1d","modified":1573108730342}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"JS中的位运算","date":"2019-11-07T06:01:52.000Z","_content":"# 1,内容概要\n* JavaScript 的位运算：先简单回顾下位运算，平时用的少，相信不少人和我一样忘的差不多了\n* 权限设计：根据位运算的特点，设计一个权限系统（添加、删除、判断等）\n\n# 2.JavaScript 位运算\n\n## 2.1 Number\n在讲位运算之前，首先简单看下JavaScript中的Number，下文需要用到\n\n在 JavaScript 里，数字均为基于 IEEE 754 标准的双精度 64 位的浮点数，引用维基百科的图片，它的结构长这样：\n![IEEE 754](JS中的位运算/ieee754.png))\n\n## 2.2位运算\n按位操作符将其操作数当作 32 位的比特序列（由 0 和 1 组成）操作，返回值依然是标准的 JavaScript 数值。JavaScript 中的按位操作符有：\n\n | 运算符             | 用法        | 描述                                                                              |\n | ------------------ | ----------- | --------------------------------------------------------------------------------- |\n | 按位与 (AND)       | a & b       | 对于每一个比特位，只有两个操作数相应的特位都是 1 时，结果才为 1，否则为 0。       |\n | 按位或（OR）       | a      \\| b | 对于每一个比特位，当两个操作数相应的比特位至少有一个 1 时，结果为 1，否则为 0。   |\n | 按位异或（XOR）    | a ^ b       | 对于每一个比特位，当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0。 |\n | 按位非（NOT）      | ~a          | 反转操作数的比特位，即 0 变成 1，1 变成 0。                                       |\n | 左移（Left shift） | a << b      | 将 a 的二进制形式向左移 b (< 32) 比特位，右边用 0 填充。                          |\n | 有符号右移         | a >> b      | 将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位。                             |\n | 无符号右移         | a >>> b     | 将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位，并使用 0 在左侧填充。        |\n\n### 下面举几个例子，主要看下 AND 和 OR：\n```shell\n# 例子1\n    A = 10001001\n    B = 10010000\nA | B = 10011001\n\n# 例子2\n    A = 10001001\n    C = 10001000\nA | C = 10001001\n\n```\n\n```shell\n# 例子1\n    A = 10001001\n    B = 10010000\nA & B = 10000000\n\n# 例子2\n    A = 10001001\n    C = 10001000\nA & C = 10001000\n\n```\n\n# 3. 位运算在权限系统中的使用\n\n传统的权限系统里，存在很多关联关系，如用户和权限的关联，用户和角色的关联。系统越大，关联关系越多，越难以维护。而引入位运算，可以巧妙的解决该问题。\n\n在讲“位运算在权限系统中的使用”之前，我们先假定两个前提，下文所有的讨论都是基于这两个前提的：\n1. 每种权限码都是唯一的（这是显然的）\n2. 所有权限码的二进制数形式，有且只有一位值为 1，其余全部为 0（2^n）\n\n#### 如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：\n\n* | 可以用来赋予权限\n* & 可以用来校验权限\n\n\n#### 为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式","source":"_posts/JS中的位运算.md","raw":"---\ntitle: JS中的位运算\ndate: 2019-11-07 14:01:52\ntags:\n---\n# 1,内容概要\n* JavaScript 的位运算：先简单回顾下位运算，平时用的少，相信不少人和我一样忘的差不多了\n* 权限设计：根据位运算的特点，设计一个权限系统（添加、删除、判断等）\n\n# 2.JavaScript 位运算\n\n## 2.1 Number\n在讲位运算之前，首先简单看下JavaScript中的Number，下文需要用到\n\n在 JavaScript 里，数字均为基于 IEEE 754 标准的双精度 64 位的浮点数，引用维基百科的图片，它的结构长这样：\n![IEEE 754](JS中的位运算/ieee754.png))\n\n## 2.2位运算\n按位操作符将其操作数当作 32 位的比特序列（由 0 和 1 组成）操作，返回值依然是标准的 JavaScript 数值。JavaScript 中的按位操作符有：\n\n | 运算符             | 用法        | 描述                                                                              |\n | ------------------ | ----------- | --------------------------------------------------------------------------------- |\n | 按位与 (AND)       | a & b       | 对于每一个比特位，只有两个操作数相应的特位都是 1 时，结果才为 1，否则为 0。       |\n | 按位或（OR）       | a      \\| b | 对于每一个比特位，当两个操作数相应的比特位至少有一个 1 时，结果为 1，否则为 0。   |\n | 按位异或（XOR）    | a ^ b       | 对于每一个比特位，当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0。 |\n | 按位非（NOT）      | ~a          | 反转操作数的比特位，即 0 变成 1，1 变成 0。                                       |\n | 左移（Left shift） | a << b      | 将 a 的二进制形式向左移 b (< 32) 比特位，右边用 0 填充。                          |\n | 有符号右移         | a >> b      | 将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位。                             |\n | 无符号右移         | a >>> b     | 将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位，并使用 0 在左侧填充。        |\n\n### 下面举几个例子，主要看下 AND 和 OR：\n```shell\n# 例子1\n    A = 10001001\n    B = 10010000\nA | B = 10011001\n\n# 例子2\n    A = 10001001\n    C = 10001000\nA | C = 10001001\n\n```\n\n```shell\n# 例子1\n    A = 10001001\n    B = 10010000\nA & B = 10000000\n\n# 例子2\n    A = 10001001\n    C = 10001000\nA & C = 10001000\n\n```\n\n# 3. 位运算在权限系统中的使用\n\n传统的权限系统里，存在很多关联关系，如用户和权限的关联，用户和角色的关联。系统越大，关联关系越多，越难以维护。而引入位运算，可以巧妙的解决该问题。\n\n在讲“位运算在权限系统中的使用”之前，我们先假定两个前提，下文所有的讨论都是基于这两个前提的：\n1. 每种权限码都是唯一的（这是显然的）\n2. 所有权限码的二进制数形式，有且只有一位值为 1，其余全部为 0（2^n）\n\n#### 如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：\n\n* | 可以用来赋予权限\n* & 可以用来校验权限\n\n\n#### 为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式","slug":"JS中的位运算","published":1,"updated":"2019-11-07T06:41:33.478Z","_id":"ck2ob2ary0000p7gjdf9j5i3x","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-内容概要\"><a href=\"#1-内容概要\" class=\"headerlink\" title=\"1,内容概要\"></a>1,内容概要</h1><ul>\n<li>JavaScript 的位运算：先简单回顾下位运算，平时用的少，相信不少人和我一样忘的差不多了</li>\n<li>权限设计：根据位运算的特点，设计一个权限系统（添加、删除、判断等）</li>\n</ul>\n<h1 id=\"2-JavaScript-位运算\"><a href=\"#2-JavaScript-位运算\" class=\"headerlink\" title=\"2.JavaScript 位运算\"></a>2.JavaScript 位运算</h1><h2 id=\"2-1-Number\"><a href=\"#2-1-Number\" class=\"headerlink\" title=\"2.1 Number\"></a>2.1 Number</h2><p>在讲位运算之前，首先简单看下JavaScript中的Number，下文需要用到</p>\n<p>在 JavaScript 里，数字均为基于 IEEE 754 标准的双精度 64 位的浮点数，引用维基百科的图片，它的结构长这样：<br><img src=\"/.99//ieee754.png\" alt=\"IEEE 754\">))</p>\n<h2 id=\"2-2位运算\"><a href=\"#2-2位运算\" class=\"headerlink\" title=\"2.2位运算\"></a>2.2位运算</h2><p>按位操作符将其操作数当作 32 位的比特序列（由 0 和 1 组成）操作，返回值依然是标准的 JavaScript 数值。JavaScript 中的按位操作符有：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>按位与 (AND)</td>\n<td>a &amp; b</td>\n<td>对于每一个比特位，只有两个操作数相应的特位都是 1 时，结果才为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位或（OR）</td>\n<td>a      | b</td>\n<td>对于每一个比特位，当两个操作数相应的比特位至少有一个 1 时，结果为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位异或（XOR）</td>\n<td>a ^ b</td>\n<td>对于每一个比特位，当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位非（NOT）</td>\n<td>~a</td>\n<td>反转操作数的比特位，即 0 变成 1，1 变成 0。</td>\n</tr>\n<tr>\n<td>左移（Left shift）</td>\n<td>a &lt;&lt; b</td>\n<td>将 a 的二进制形式向左移 b (&lt; 32) 比特位，右边用 0 填充。</td>\n</tr>\n<tr>\n<td>有符号右移</td>\n<td>a &gt;&gt; b</td>\n<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位。</td>\n</tr>\n<tr>\n<td>无符号右移</td>\n<td>a &gt;&gt;&gt; b</td>\n<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td>\n</tr>\n</tbody></table>\n<h3 id=\"下面举几个例子，主要看下-AND-和-OR：\"><a href=\"#下面举几个例子，主要看下-AND-和-OR：\" class=\"headerlink\" title=\"下面举几个例子，主要看下 AND 和 OR：\"></a>下面举几个例子，主要看下 AND 和 OR：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子1</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    B = 10010000</span><br><span class=\"line\">A | B = 10011001</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子2</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    C = 10001000</span><br><span class=\"line\">A | C = 10001001</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子1</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    B = 10010000</span><br><span class=\"line\">A &amp; B = 10000000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子2</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    C = 10001000</span><br><span class=\"line\">A &amp; C = 10001000</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-位运算在权限系统中的使用\"><a href=\"#3-位运算在权限系统中的使用\" class=\"headerlink\" title=\"3. 位运算在权限系统中的使用\"></a>3. 位运算在权限系统中的使用</h1><p>传统的权限系统里，存在很多关联关系，如用户和权限的关联，用户和角色的关联。系统越大，关联关系越多，越难以维护。而引入位运算，可以巧妙的解决该问题。</p>\n<p>在讲“位运算在权限系统中的使用”之前，我们先假定两个前提，下文所有的讨论都是基于这两个前提的：</p>\n<ol>\n<li>每种权限码都是唯一的（这是显然的）</li>\n<li>所有权限码的二进制数形式，有且只有一位值为 1，其余全部为 0（2^n）</li>\n</ol>\n<h4 id=\"如果用户权限和权限码，全部使用二级制数字表示，再结合上面-AND-和-OR-的例子，分析位运算的特点，不难发现：\"><a href=\"#如果用户权限和权限码，全部使用二级制数字表示，再结合上面-AND-和-OR-的例子，分析位运算的特点，不难发现：\" class=\"headerlink\" title=\"如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：\"></a>如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：</h4><ul>\n<li>| 可以用来赋予权限</li>\n<li>&amp; 可以用来校验权限</li>\n</ul>\n<h4 id=\"为了讲的更明白，这里用-Linux-中的实例分析下，Linux-的文件权限分为读、写和执行，有字母和数字等多种表现形式\"><a href=\"#为了讲的更明白，这里用-Linux-中的实例分析下，Linux-的文件权限分为读、写和执行，有字母和数字等多种表现形式\" class=\"headerlink\" title=\"为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式\"></a>为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式</h4>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-内容概要\"><a href=\"#1-内容概要\" class=\"headerlink\" title=\"1,内容概要\"></a>1,内容概要</h1><ul>\n<li>JavaScript 的位运算：先简单回顾下位运算，平时用的少，相信不少人和我一样忘的差不多了</li>\n<li>权限设计：根据位运算的特点，设计一个权限系统（添加、删除、判断等）</li>\n</ul>\n<h1 id=\"2-JavaScript-位运算\"><a href=\"#2-JavaScript-位运算\" class=\"headerlink\" title=\"2.JavaScript 位运算\"></a>2.JavaScript 位运算</h1><h2 id=\"2-1-Number\"><a href=\"#2-1-Number\" class=\"headerlink\" title=\"2.1 Number\"></a>2.1 Number</h2><p>在讲位运算之前，首先简单看下JavaScript中的Number，下文需要用到</p>\n<p>在 JavaScript 里，数字均为基于 IEEE 754 标准的双精度 64 位的浮点数，引用维基百科的图片，它的结构长这样：<br><img src=\"/.99//ieee754.png\" alt=\"IEEE 754\">))</p>\n<h2 id=\"2-2位运算\"><a href=\"#2-2位运算\" class=\"headerlink\" title=\"2.2位运算\"></a>2.2位运算</h2><p>按位操作符将其操作数当作 32 位的比特序列（由 0 和 1 组成）操作，返回值依然是标准的 JavaScript 数值。JavaScript 中的按位操作符有：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>按位与 (AND)</td>\n<td>a &amp; b</td>\n<td>对于每一个比特位，只有两个操作数相应的特位都是 1 时，结果才为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位或（OR）</td>\n<td>a      | b</td>\n<td>对于每一个比特位，当两个操作数相应的比特位至少有一个 1 时，结果为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位异或（XOR）</td>\n<td>a ^ b</td>\n<td>对于每一个比特位，当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位非（NOT）</td>\n<td>~a</td>\n<td>反转操作数的比特位，即 0 变成 1，1 变成 0。</td>\n</tr>\n<tr>\n<td>左移（Left shift）</td>\n<td>a &lt;&lt; b</td>\n<td>将 a 的二进制形式向左移 b (&lt; 32) 比特位，右边用 0 填充。</td>\n</tr>\n<tr>\n<td>有符号右移</td>\n<td>a &gt;&gt; b</td>\n<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位。</td>\n</tr>\n<tr>\n<td>无符号右移</td>\n<td>a &gt;&gt;&gt; b</td>\n<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td>\n</tr>\n</tbody></table>\n<h3 id=\"下面举几个例子，主要看下-AND-和-OR：\"><a href=\"#下面举几个例子，主要看下-AND-和-OR：\" class=\"headerlink\" title=\"下面举几个例子，主要看下 AND 和 OR：\"></a>下面举几个例子，主要看下 AND 和 OR：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子1</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    B = 10010000</span><br><span class=\"line\">A | B = 10011001</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子2</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    C = 10001000</span><br><span class=\"line\">A | C = 10001001</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子1</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    B = 10010000</span><br><span class=\"line\">A &amp; B = 10000000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子2</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    C = 10001000</span><br><span class=\"line\">A &amp; C = 10001000</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-位运算在权限系统中的使用\"><a href=\"#3-位运算在权限系统中的使用\" class=\"headerlink\" title=\"3. 位运算在权限系统中的使用\"></a>3. 位运算在权限系统中的使用</h1><p>传统的权限系统里，存在很多关联关系，如用户和权限的关联，用户和角色的关联。系统越大，关联关系越多，越难以维护。而引入位运算，可以巧妙的解决该问题。</p>\n<p>在讲“位运算在权限系统中的使用”之前，我们先假定两个前提，下文所有的讨论都是基于这两个前提的：</p>\n<ol>\n<li>每种权限码都是唯一的（这是显然的）</li>\n<li>所有权限码的二进制数形式，有且只有一位值为 1，其余全部为 0（2^n）</li>\n</ol>\n<h4 id=\"如果用户权限和权限码，全部使用二级制数字表示，再结合上面-AND-和-OR-的例子，分析位运算的特点，不难发现：\"><a href=\"#如果用户权限和权限码，全部使用二级制数字表示，再结合上面-AND-和-OR-的例子，分析位运算的特点，不难发现：\" class=\"headerlink\" title=\"如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：\"></a>如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：</h4><ul>\n<li>| 可以用来赋予权限</li>\n<li>&amp; 可以用来校验权限</li>\n</ul>\n<h4 id=\"为了讲的更明白，这里用-Linux-中的实例分析下，Linux-的文件权限分为读、写和执行，有字母和数字等多种表现形式\"><a href=\"#为了讲的更明白，这里用-Linux-中的实例分析下，Linux-的文件权限分为读、写和执行，有字母和数字等多种表现形式\" class=\"headerlink\" title=\"为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式\"></a>为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式</h4>"},{"title":"typescript@3.7beta","date":"2019-10-29T12:02:29.000Z","_content":"# 新增功能\n\n## 1，可选链 ?.\n\n\n```ts\n  let x = foo.bar.baz()\n    =>\n  let x = (f===null || foo === undefined) ?\n        Undefined :\n        foo.bar.baz()\n```\n不同于&&，这个操作符仅处理null和undefined\n\n## 2，空值合并 ??\n  ```ts\n  let x = foo ?? Bar()\n  =>\n  let x = (foo!==null&&foo!==undefined) ?\n    foo :\n    bar()\n  ```\n  同可选链, 只判断null和iundefined，(|| 会有意外发生，因为 0 NaN ‘’ 会被认为是假)\n\n## 3,断言函数\n  ```ts\nfunction assertIsString(val: any): asserts val is string {\n  if (typeof val !== \"string\") {\n      throw new AssertionError(\"Not a string!\");\n  }\n}\n\nfunction yell(str: any) {\n    assertIsString(str);\n    // 现在 TypeScript 知道 'str' 是一个 'string'。\n    return str.toUppercase();\n    //         ~~~~~~~~~~~\n    // 错误：属性 'toUppercase' 在 'string' 类型上不存在。\n    //      你是说 'toUpperCase' 吗？\n}\n\n=>\n\n// 这些断言签名与编写类型断言签名非常相似\nfunction isString(val: any): val is string {\n  return typeof val === \"string\";\n}\n\nfunction yell(str: any) {\n    if (isString(str)) {\n        return str.toUppercase();\n    }\n    throw \"Oops!\";\n}\n```\n就像是类型断言签名，这些断言签名也具有难以置信的表现力。我们可以用它们表达一些相当复杂的想法。\n```ts\nfunction assertIsDefined<T>(val: T): asserts val is NonNullable<T> {\n    if (val === undefined || val === null) {\n        throw new AssertionError(\n            `Expected 'val' to be defined, but received ${val}`\n        );\n    }\n}\n```\n## 4,类型递归\n\n```ts\n\ntype Json =\n    | string\n    | number\n    | boolean\n    | null\n    | JsonObject\n    | JsonArray;\n\ninterface JsonObject {\n    [property: string]: Json;\n}\n\ninterface JsonArray extends Array<Json> {}\n\n=> \n\ntype Json =\n    | string\n    | number\n    | boolean\n    | null\n    | { [property: string]: Json }\n    | Json[];\n```\n\n这种新的宽松（模式）使我们也可以在元组中递归引用类型别名。下面这个曾经报错的代码现在是有效的 TypeScript 代码\n\n```ts\ntype VirtualNode =\n    | string\n    | [string, { [key: string]: any }, ...VirtualNode[]];\n\nconst myNode: VirtualNode =\n    [\"div\", { id: \"parent\" },\n      [\"div\", { id: \"first-child\" }, \"I'm the first child\"],\n      [\"div\", { id: \"second-child\" }, \"I'm the second child\"]\n    ]\n```\n\n## 5,未调用的函数检查\n\n  ```ts\n  interface User {\n    isAdministrator(): boolean;\n    notify(): void;\n    doNotDisturb?(): boolean;\n  }\n\n  // 稍后……\n\n  // 有问题的代码，请勿使用！\n  function doAdminThing(user: User) {\n      // 糟糕！\n      if (user.isAdministrator) {\n          sudo();\n          editTheConfiguration();\n      }\n      else {\n          throw new AccessDeniedError(\"User is not an admin\");\n      }\n  }\n```\n在这里，我们忘记了调用 isAdministrator，该代码将错误地允许非管理员用户编辑配置！\n在 TypeScript 3.7 中，这会被标识为可能的错误：\n```ts\nfunction doAdminThing(user: User) {\n    if (user.isAdministrator) {\n    //  ~~~~~~~~~~~~~~~~~~~~\n    // 错误！这个条件将始终返回 true，因为这个函数定义是一直存在的\n    //      你的意思是调用它吗？\n    }\n}\n```\nstrictNullChecks关闭或者参数或之后在 if 中调用此函数或者属性是可选的，将不会产生错误：\n```ts\ninterface User {\n    isAdministrator(): boolean;\n    notify(): void;\n    doNotDisturb?(): boolean;\n}\n\nfunction issueNotification(user: User) {\n    if (user.doNotDisturb) {\n        // OK，属性是可选的\n    }\n    if (user.notify) {\n        // OK，调用了这个方法\n        user.notify();\n    }\n}\n```\n\n以及其它...这里只列举了几项主要的.\n\n\n","source":"_posts/typescript-3-7beta.md","raw":"---\ntitle: typescript@3.7beta\ndate: 2019-10-29 20:02:29\ntags:\n---\n# 新增功能\n\n## 1，可选链 ?.\n\n\n```ts\n  let x = foo.bar.baz()\n    =>\n  let x = (f===null || foo === undefined) ?\n        Undefined :\n        foo.bar.baz()\n```\n不同于&&，这个操作符仅处理null和undefined\n\n## 2，空值合并 ??\n  ```ts\n  let x = foo ?? Bar()\n  =>\n  let x = (foo!==null&&foo!==undefined) ?\n    foo :\n    bar()\n  ```\n  同可选链, 只判断null和iundefined，(|| 会有意外发生，因为 0 NaN ‘’ 会被认为是假)\n\n## 3,断言函数\n  ```ts\nfunction assertIsString(val: any): asserts val is string {\n  if (typeof val !== \"string\") {\n      throw new AssertionError(\"Not a string!\");\n  }\n}\n\nfunction yell(str: any) {\n    assertIsString(str);\n    // 现在 TypeScript 知道 'str' 是一个 'string'。\n    return str.toUppercase();\n    //         ~~~~~~~~~~~\n    // 错误：属性 'toUppercase' 在 'string' 类型上不存在。\n    //      你是说 'toUpperCase' 吗？\n}\n\n=>\n\n// 这些断言签名与编写类型断言签名非常相似\nfunction isString(val: any): val is string {\n  return typeof val === \"string\";\n}\n\nfunction yell(str: any) {\n    if (isString(str)) {\n        return str.toUppercase();\n    }\n    throw \"Oops!\";\n}\n```\n就像是类型断言签名，这些断言签名也具有难以置信的表现力。我们可以用它们表达一些相当复杂的想法。\n```ts\nfunction assertIsDefined<T>(val: T): asserts val is NonNullable<T> {\n    if (val === undefined || val === null) {\n        throw new AssertionError(\n            `Expected 'val' to be defined, but received ${val}`\n        );\n    }\n}\n```\n## 4,类型递归\n\n```ts\n\ntype Json =\n    | string\n    | number\n    | boolean\n    | null\n    | JsonObject\n    | JsonArray;\n\ninterface JsonObject {\n    [property: string]: Json;\n}\n\ninterface JsonArray extends Array<Json> {}\n\n=> \n\ntype Json =\n    | string\n    | number\n    | boolean\n    | null\n    | { [property: string]: Json }\n    | Json[];\n```\n\n这种新的宽松（模式）使我们也可以在元组中递归引用类型别名。下面这个曾经报错的代码现在是有效的 TypeScript 代码\n\n```ts\ntype VirtualNode =\n    | string\n    | [string, { [key: string]: any }, ...VirtualNode[]];\n\nconst myNode: VirtualNode =\n    [\"div\", { id: \"parent\" },\n      [\"div\", { id: \"first-child\" }, \"I'm the first child\"],\n      [\"div\", { id: \"second-child\" }, \"I'm the second child\"]\n    ]\n```\n\n## 5,未调用的函数检查\n\n  ```ts\n  interface User {\n    isAdministrator(): boolean;\n    notify(): void;\n    doNotDisturb?(): boolean;\n  }\n\n  // 稍后……\n\n  // 有问题的代码，请勿使用！\n  function doAdminThing(user: User) {\n      // 糟糕！\n      if (user.isAdministrator) {\n          sudo();\n          editTheConfiguration();\n      }\n      else {\n          throw new AccessDeniedError(\"User is not an admin\");\n      }\n  }\n```\n在这里，我们忘记了调用 isAdministrator，该代码将错误地允许非管理员用户编辑配置！\n在 TypeScript 3.7 中，这会被标识为可能的错误：\n```ts\nfunction doAdminThing(user: User) {\n    if (user.isAdministrator) {\n    //  ~~~~~~~~~~~~~~~~~~~~\n    // 错误！这个条件将始终返回 true，因为这个函数定义是一直存在的\n    //      你的意思是调用它吗？\n    }\n}\n```\nstrictNullChecks关闭或者参数或之后在 if 中调用此函数或者属性是可选的，将不会产生错误：\n```ts\ninterface User {\n    isAdministrator(): boolean;\n    notify(): void;\n    doNotDisturb?(): boolean;\n}\n\nfunction issueNotification(user: User) {\n    if (user.doNotDisturb) {\n        // OK，属性是可选的\n    }\n    if (user.notify) {\n        // OK，调用了这个方法\n        user.notify();\n    }\n}\n```\n\n以及其它...这里只列举了几项主要的.\n\n\n","slug":"typescript-3-7beta","published":1,"updated":"2019-10-30T08:23:30.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ob2as80001p7gjeqvogevu","content":"<h1 id=\"新增功能\"><a href=\"#新增功能\" class=\"headerlink\" title=\"新增功能\"></a>新增功能</h1><h2 id=\"1，可选链\"><a href=\"#1，可选链\" class=\"headerlink\" title=\"1，可选链 ?.\"></a>1，可选链 ?.</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = foo.bar.baz()</span><br><span class=\"line\">  =&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = (f===<span class=\"literal\">null</span> || foo === <span class=\"literal\">undefined</span>) ?</span><br><span class=\"line\">      Undefined :</span><br><span class=\"line\">      foo.bar.baz()</span><br></pre></td></tr></table></figure>\n<p>不同于&amp;&amp;，这个操作符仅处理null和undefined</p>\n<h2 id=\"2，空值合并\"><a href=\"#2，空值合并\" class=\"headerlink\" title=\"2，空值合并 ??\"></a>2，空值合并 ??</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = foo ?? Bar()</span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = (foo!==<span class=\"literal\">null</span>&amp;&amp;foo!==<span class=\"literal\">undefined</span>) ?</span><br><span class=\"line\">  foo :</span><br><span class=\"line\">  bar()</span><br></pre></td></tr></table></figure>\n<p>  同可选链, 只判断null和iundefined，(|| 会有意外发生，因为 0 NaN ‘’ 会被认为是假)</p>\n<h2 id=\"3-断言函数\"><a href=\"#3-断言函数\" class=\"headerlink\" title=\"3,断言函数\"></a>3,断言函数</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertIsString</span>(<span class=\"params\">val: <span class=\"built_in\">any</span></span>): <span class=\"title\">asserts</span> <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val !== <span class=\"string\">\"string\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"Not a string!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">yell</span>(<span class=\"params\">str: <span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">    assertIsString(str);</span><br><span class=\"line\">    <span class=\"comment\">// 现在 TypeScript 知道 'str' 是一个 'string'。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.toUppercase();</span><br><span class=\"line\">    <span class=\"comment\">//         ~~~~~~~~~~~</span></span><br><span class=\"line\">    <span class=\"comment\">// 错误：属性 'toUppercase' 在 'string' 类型上不存在。</span></span><br><span class=\"line\">    <span class=\"comment\">//      你是说 'toUpperCase' 吗？</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这些断言签名与编写类型断言签名非常相似</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">val: <span class=\"built_in\">any</span></span>): <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">yell</span>(<span class=\"params\">str: <span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isString(str)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.toUppercase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">\"Oops!\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就像是类型断言签名，这些断言签名也具有难以置信的表现力。我们可以用它们表达一些相当复杂的想法。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertIsDefined</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">val: T</span>): <span class=\"title\">asserts</span> <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">NonNullable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val === <span class=\"literal\">undefined</span> || val === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(</span><br><span class=\"line\">            <span class=\"string\">`Expected 'val' to be defined, but received <span class=\"subst\">$&#123;val&#125;</span>`</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-类型递归\"><a href=\"#4-类型递归\" class=\"headerlink\" title=\"4,类型递归\"></a>4,类型递归</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Json =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | <span class=\"built_in\">number</span></span><br><span class=\"line\">    | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">    | <span class=\"literal\">null</span></span><br><span class=\"line\">    | JsonObject</span><br><span class=\"line\">    | JsonArray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> JsonObject &#123;</span><br><span class=\"line\">    [property: <span class=\"built_in\">string</span>]: Json;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> JsonArray <span class=\"keyword\">extends</span> Array&lt;Json&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Json =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | <span class=\"built_in\">number</span></span><br><span class=\"line\">    | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">    | <span class=\"literal\">null</span></span><br><span class=\"line\">    | &#123; [property: <span class=\"built_in\">string</span>]: Json &#125;</span><br><span class=\"line\">    | Json[];</span><br></pre></td></tr></table></figure>\n\n<p>这种新的宽松（模式）使我们也可以在元组中递归引用类型别名。下面这个曾经报错的代码现在是有效的 TypeScript 代码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> VirtualNode =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | [<span class=\"built_in\">string</span>, &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> &#125;, ...VirtualNode[]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myNode: VirtualNode =</span><br><span class=\"line\">    [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"parent\"</span> &#125;,</span><br><span class=\"line\">      [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"first-child\"</span> &#125;, <span class=\"string\">\"I'm the first child\"</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"second-child\"</span> &#125;, <span class=\"string\">\"I'm the second child\"</span>]</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-未调用的函数检查\"><a href=\"#5-未调用的函数检查\" class=\"headerlink\" title=\"5,未调用的函数检查\"></a>5,未调用的函数检查</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">  isAdministrator(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  notify(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  doNotDisturb?(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 稍后……</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有问题的代码，请勿使用！</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdminThing</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 糟糕！</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.isAdministrator) &#123;</span><br><span class=\"line\">        sudo();</span><br><span class=\"line\">        editTheConfiguration();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AccessDeniedError(<span class=\"string\">\"User is not an admin\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里，我们忘记了调用 isAdministrator，该代码将错误地允许非管理员用户编辑配置！<br>在 TypeScript 3.7 中，这会被标识为可能的错误：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdminThing</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.isAdministrator) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  ~~~~~~~~~~~~~~~~~~~~</span></span><br><span class=\"line\">    <span class=\"comment\">// 错误！这个条件将始终返回 true，因为这个函数定义是一直存在的</span></span><br><span class=\"line\">    <span class=\"comment\">//      你的意思是调用它吗？</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>strictNullChecks关闭或者参数或之后在 if 中调用此函数或者属性是可选的，将不会产生错误：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">    isAdministrator(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    notify(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    doNotDisturb?(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">issueNotification</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.doNotDisturb) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// OK，属性是可选的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.notify) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// OK，调用了这个方法</span></span><br><span class=\"line\">        user.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以及其它…这里只列举了几项主要的.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"新增功能\"><a href=\"#新增功能\" class=\"headerlink\" title=\"新增功能\"></a>新增功能</h1><h2 id=\"1，可选链\"><a href=\"#1，可选链\" class=\"headerlink\" title=\"1，可选链 ?.\"></a>1，可选链 ?.</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = foo.bar.baz()</span><br><span class=\"line\">  =&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = (f===<span class=\"literal\">null</span> || foo === <span class=\"literal\">undefined</span>) ?</span><br><span class=\"line\">      Undefined :</span><br><span class=\"line\">      foo.bar.baz()</span><br></pre></td></tr></table></figure>\n<p>不同于&amp;&amp;，这个操作符仅处理null和undefined</p>\n<h2 id=\"2，空值合并\"><a href=\"#2，空值合并\" class=\"headerlink\" title=\"2，空值合并 ??\"></a>2，空值合并 ??</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = foo ?? Bar()</span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = (foo!==<span class=\"literal\">null</span>&amp;&amp;foo!==<span class=\"literal\">undefined</span>) ?</span><br><span class=\"line\">  foo :</span><br><span class=\"line\">  bar()</span><br></pre></td></tr></table></figure>\n<p>  同可选链, 只判断null和iundefined，(|| 会有意外发生，因为 0 NaN ‘’ 会被认为是假)</p>\n<h2 id=\"3-断言函数\"><a href=\"#3-断言函数\" class=\"headerlink\" title=\"3,断言函数\"></a>3,断言函数</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertIsString</span>(<span class=\"params\">val: <span class=\"built_in\">any</span></span>): <span class=\"title\">asserts</span> <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val !== <span class=\"string\">\"string\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"Not a string!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">yell</span>(<span class=\"params\">str: <span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">    assertIsString(str);</span><br><span class=\"line\">    <span class=\"comment\">// 现在 TypeScript 知道 'str' 是一个 'string'。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.toUppercase();</span><br><span class=\"line\">    <span class=\"comment\">//         ~~~~~~~~~~~</span></span><br><span class=\"line\">    <span class=\"comment\">// 错误：属性 'toUppercase' 在 'string' 类型上不存在。</span></span><br><span class=\"line\">    <span class=\"comment\">//      你是说 'toUpperCase' 吗？</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这些断言签名与编写类型断言签名非常相似</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">val: <span class=\"built_in\">any</span></span>): <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">yell</span>(<span class=\"params\">str: <span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isString(str)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.toUppercase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">\"Oops!\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就像是类型断言签名，这些断言签名也具有难以置信的表现力。我们可以用它们表达一些相当复杂的想法。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertIsDefined</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">val: T</span>): <span class=\"title\">asserts</span> <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">NonNullable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val === <span class=\"literal\">undefined</span> || val === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(</span><br><span class=\"line\">            <span class=\"string\">`Expected 'val' to be defined, but received <span class=\"subst\">$&#123;val&#125;</span>`</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-类型递归\"><a href=\"#4-类型递归\" class=\"headerlink\" title=\"4,类型递归\"></a>4,类型递归</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Json =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | <span class=\"built_in\">number</span></span><br><span class=\"line\">    | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">    | <span class=\"literal\">null</span></span><br><span class=\"line\">    | JsonObject</span><br><span class=\"line\">    | JsonArray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> JsonObject &#123;</span><br><span class=\"line\">    [property: <span class=\"built_in\">string</span>]: Json;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> JsonArray <span class=\"keyword\">extends</span> Array&lt;Json&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Json =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | <span class=\"built_in\">number</span></span><br><span class=\"line\">    | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">    | <span class=\"literal\">null</span></span><br><span class=\"line\">    | &#123; [property: <span class=\"built_in\">string</span>]: Json &#125;</span><br><span class=\"line\">    | Json[];</span><br></pre></td></tr></table></figure>\n\n<p>这种新的宽松（模式）使我们也可以在元组中递归引用类型别名。下面这个曾经报错的代码现在是有效的 TypeScript 代码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> VirtualNode =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | [<span class=\"built_in\">string</span>, &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> &#125;, ...VirtualNode[]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myNode: VirtualNode =</span><br><span class=\"line\">    [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"parent\"</span> &#125;,</span><br><span class=\"line\">      [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"first-child\"</span> &#125;, <span class=\"string\">\"I'm the first child\"</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"second-child\"</span> &#125;, <span class=\"string\">\"I'm the second child\"</span>]</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-未调用的函数检查\"><a href=\"#5-未调用的函数检查\" class=\"headerlink\" title=\"5,未调用的函数检查\"></a>5,未调用的函数检查</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">  isAdministrator(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  notify(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  doNotDisturb?(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 稍后……</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有问题的代码，请勿使用！</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdminThing</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 糟糕！</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.isAdministrator) &#123;</span><br><span class=\"line\">        sudo();</span><br><span class=\"line\">        editTheConfiguration();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AccessDeniedError(<span class=\"string\">\"User is not an admin\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里，我们忘记了调用 isAdministrator，该代码将错误地允许非管理员用户编辑配置！<br>在 TypeScript 3.7 中，这会被标识为可能的错误：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdminThing</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.isAdministrator) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  ~~~~~~~~~~~~~~~~~~~~</span></span><br><span class=\"line\">    <span class=\"comment\">// 错误！这个条件将始终返回 true，因为这个函数定义是一直存在的</span></span><br><span class=\"line\">    <span class=\"comment\">//      你的意思是调用它吗？</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>strictNullChecks关闭或者参数或之后在 if 中调用此函数或者属性是可选的，将不会产生错误：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">    isAdministrator(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    notify(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    doNotDisturb?(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">issueNotification</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.doNotDisturb) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// OK，属性是可选的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.notify) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// OK，调用了这个方法</span></span><br><span class=\"line\">        user.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以及其它…这里只列举了几项主要的.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}