{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1573701725562},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1578447809259},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1573701725562},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1573701725562},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1573701725562},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1573701725569},{"_id":"source/_posts/typescript的几个高级类型.md","hash":"6710f9dd3d72afec17a7bb5525db55f665866e11","modified":1573701857763},{"_id":"source/_posts/typescript-3-7beta.md","hash":"c574d4501dfb96d3a40e1044faa80106fc7aa46c","modified":1573702126079},{"_id":"source/_posts/JS中的位运算.md","hash":"9373d01dd234bad7b964062d6092e9e85a925c1e","modified":1573701725560},{"_id":"source/_posts/执行上下文-变量对象.md","hash":"ffb31bf68691bf2b657cb4cb723f19be08513ca5","modified":1573701725561},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1573701725563},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1573701725563},{"_id":"source/_posts/手写js实现.md","hash":"d672114d49fbd8990327967fd36ebdfd60db96a7","modified":1578986801183},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1573701725563},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1573701725563},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1573701725563},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1573701725563},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1573701725564},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1573701725564},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1573701725564},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1573701725564},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1573701725564},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1573701725565},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1573701725568},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1573701725568},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1573701725569},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1573701725569},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573701725569},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1573701725570},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1573701725569},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573701725569},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1573701725570},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1573701725572},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1573701725580},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1573701725580},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1573701725584},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1573701725580},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1573701725581},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1573701725581},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1573701725581},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1573701725581},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1573701725583},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1573701725565},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1573701725565},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1573701725583},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1573701725565},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1573701725565},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1573701725565},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1573701725583},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1573701725566},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1573701725566},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1573701725566},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1573701725566},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1573701725566},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1573701725567},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1573701725568},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1573701725568},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1573701725568},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1573701725568},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1573701725568},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1573701725570},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1573701725570},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1573701725570},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1573701725571},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1573701725571},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1573701725571},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1573701725571},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1573701725571},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1573701725571},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1573701725572},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1573701725571},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1573701725572},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1573701725574},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1573701725574},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1573701725581},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1573701725581},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1573701725582},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1573701725582},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1573701725577},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1573701725582},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1573701725582},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1573701725567},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1573701725566},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1573701725567},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1573701725567},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1573701725567},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1573701725567},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1573701725576},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1573701725575},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1573701725580}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"typescript的几个高级类型","date":"2019-11-13T02:28:48.000Z","_content":"\n## lib库中的五个高级类型\n**以下所有例子皆以person为例**\n\n```ts\ninterface Person {\n  name: string\n  age?: number\n}\n```\n### Partial\n源码\n```ts\ntype Partial<T> = {\n  [P in keyof T]? T[P]\n}\n```\n实例\n```ts\ntype person2 = Partial<Person>\n// person2 === {name?:string; age?:number}\n```\n\n### Required\n源码\n```ts\ntype Required<T> = {\n  [P in keyof T]-?: T[P]\n}\n```\n\n实例\n```js\ntype person3 = Required<Person>\n// person3 === {name: string; age: number}\n```\n\n### Readonly\n源码\n```ts\ntype Readonly<T> = {\n  readonly [P in keyof T]: T[P]\n}\n```\n实例\n```ts\ntype person4 = Readonly<Person>\n// person4 === {\n//   readonly name: string\n//   readonly age?: number\n}\n```\n\n### Pick\n源码：\n```ts\ntype Pick<T, K extends keyof T> = {\n  [P in K]: T[P]\n}\n```\n实例\n```ts\ntype person5 = Pick<Person, \"name\">\n// person5 = {name: string}\n```\n\n### Record\n源码：\n```ts\ntype Record<K extends ketof any, T> = {\n  [P in K]: T\n}\n```\n实例\n```ts\ntype person6 = Recoed<'name'| 'age', string>\n// person6 === {name: string, age: string}\n```\n\n## 条件类型\n关于条件类型,官网上说的很详细了,我就直接拿过来\n```ts\ntype T00 = Exclude<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"b\" | \"d\"\ntype T01 = Extract<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"a\" | \"c\"\n\ntype T02 = Exclude<string | number | (() => void), Function>;  // string | number\ntype T03 = Extract<string | number | (() => void), Function>;  // () => void\n\ntype T04 = NonNullable<string | number | undefined>;  // string | number\ntype T05 = NonNullable<(() => string) | string[] | null | undefined>;  // (() => string) | string[]\n\nfunction f1(s: string) {\n    return { a: 1, b: s };\n}\n\nclass C {\n    x = 0;\n    y = 0;\n}\n\ntype T10 = ReturnType<() => string>;  // string\ntype T11 = ReturnType<(s: string) => void>;  // void\ntype T12 = ReturnType<(<T>() => T)>;  // {}\ntype T13 = ReturnType<(<T extends U, U extends number[]>() => T)>;  // number[]\ntype T14 = ReturnType<typeof f1>;  // { a: number, b: string }\ntype T15 = ReturnType<any>;  // any\ntype T16 = ReturnType<never>;  // any\ntype T17 = ReturnType<string>;  // Error\ntype T18 = ReturnType<Function>;  // Error\n\ntype T20 = InstanceType<typeof C>;  // CP\ntype T21 = InstanceType<any>;  // any\ntype T22 = InstanceType<never>;  // any\ntype T23 = InstanceType<string>;  // Error\ntype T24 = InstanceType<Function>;  // Error\n```\n**高级类型与条件类型就这些,如果能够掌握他们,你就能在 ts 的海洋中任意遨游了**","source":"_posts/typescript的几个高级类型.md","raw":"---\ntitle: typescript的几个高级类型\ndate: 2019-11-13 10:28:48\ntags:\n---\n\n## lib库中的五个高级类型\n**以下所有例子皆以person为例**\n\n```ts\ninterface Person {\n  name: string\n  age?: number\n}\n```\n### Partial\n源码\n```ts\ntype Partial<T> = {\n  [P in keyof T]? T[P]\n}\n```\n实例\n```ts\ntype person2 = Partial<Person>\n// person2 === {name?:string; age?:number}\n```\n\n### Required\n源码\n```ts\ntype Required<T> = {\n  [P in keyof T]-?: T[P]\n}\n```\n\n实例\n```js\ntype person3 = Required<Person>\n// person3 === {name: string; age: number}\n```\n\n### Readonly\n源码\n```ts\ntype Readonly<T> = {\n  readonly [P in keyof T]: T[P]\n}\n```\n实例\n```ts\ntype person4 = Readonly<Person>\n// person4 === {\n//   readonly name: string\n//   readonly age?: number\n}\n```\n\n### Pick\n源码：\n```ts\ntype Pick<T, K extends keyof T> = {\n  [P in K]: T[P]\n}\n```\n实例\n```ts\ntype person5 = Pick<Person, \"name\">\n// person5 = {name: string}\n```\n\n### Record\n源码：\n```ts\ntype Record<K extends ketof any, T> = {\n  [P in K]: T\n}\n```\n实例\n```ts\ntype person6 = Recoed<'name'| 'age', string>\n// person6 === {name: string, age: string}\n```\n\n## 条件类型\n关于条件类型,官网上说的很详细了,我就直接拿过来\n```ts\ntype T00 = Exclude<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"b\" | \"d\"\ntype T01 = Extract<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"a\" | \"c\"\n\ntype T02 = Exclude<string | number | (() => void), Function>;  // string | number\ntype T03 = Extract<string | number | (() => void), Function>;  // () => void\n\ntype T04 = NonNullable<string | number | undefined>;  // string | number\ntype T05 = NonNullable<(() => string) | string[] | null | undefined>;  // (() => string) | string[]\n\nfunction f1(s: string) {\n    return { a: 1, b: s };\n}\n\nclass C {\n    x = 0;\n    y = 0;\n}\n\ntype T10 = ReturnType<() => string>;  // string\ntype T11 = ReturnType<(s: string) => void>;  // void\ntype T12 = ReturnType<(<T>() => T)>;  // {}\ntype T13 = ReturnType<(<T extends U, U extends number[]>() => T)>;  // number[]\ntype T14 = ReturnType<typeof f1>;  // { a: number, b: string }\ntype T15 = ReturnType<any>;  // any\ntype T16 = ReturnType<never>;  // any\ntype T17 = ReturnType<string>;  // Error\ntype T18 = ReturnType<Function>;  // Error\n\ntype T20 = InstanceType<typeof C>;  // CP\ntype T21 = InstanceType<any>;  // any\ntype T22 = InstanceType<never>;  // any\ntype T23 = InstanceType<string>;  // Error\ntype T24 = InstanceType<Function>;  // Error\n```\n**高级类型与条件类型就这些,如果能够掌握他们,你就能在 ts 的海洋中任意遨游了**","slug":"typescript的几个高级类型","published":1,"updated":"2019-11-14T03:24:17.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck54n2yic0000jigj031578me","content":"<h2 id=\"lib库中的五个高级类型\"><a href=\"#lib库中的五个高级类型\" class=\"headerlink\" title=\"lib库中的五个高级类型\"></a>lib库中的五个高级类型</h2><p><strong>以下所有例子皆以person为例</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span></span><br><span class=\"line\">  age?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial</h3><p>源码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Partial&lt;T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> keyof T]? T[P]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person2 = Partial&lt;Person&gt;</span><br><span class=\"line\"><span class=\"comment\">// person2 === &#123;name?:string; age?:number&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"Required\"></a>Required</h3><p>源码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Required&lt;T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> keyof T]-?: T[P]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type person3 = Required&lt;Person&gt;</span><br><span class=\"line\"><span class=\"comment\">// person3 === &#123;name: string; age: number&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Readonly\"><a href=\"#Readonly\" class=\"headerlink\" title=\"Readonly\"></a>Readonly</h3><p>源码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Readonly&lt;T&gt; = &#123;</span><br><span class=\"line\">  readonly [P <span class=\"keyword\">in</span> keyof T]: T[P]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person4 = Readonly&lt;Person&gt;</span><br><span class=\"line\"><span class=\"comment\">// person4 === &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   readonly name: string</span></span><br><span class=\"line\"><span class=\"comment\">//   readonly age?: number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pick\"><a href=\"#Pick\" class=\"headerlink\" title=\"Pick\"></a>Pick</h3><p>源码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Pick&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> K]: T[P]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person5 = Pick&lt;Person, <span class=\"string\">\"name\"</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// person5 = &#123;name: string&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Record\"><a href=\"#Record\" class=\"headerlink\" title=\"Record\"></a>Record</h3><p>源码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Record&lt;K <span class=\"keyword\">extends</span> ketof <span class=\"built_in\">any</span>, T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> K]: T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person6 = Recoed&lt;<span class=\"string\">'name'</span>| <span class=\"string\">'age'</span>, <span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// person6 === &#123;name: string, age: string&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件类型\"><a href=\"#条件类型\" class=\"headerlink\" title=\"条件类型\"></a>条件类型</h2><p>关于条件类型,官网上说的很详细了,我就直接拿过来</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> T00 = Exclude&lt;<span class=\"string\">\"a\"</span> | <span class=\"string\">\"b\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"d\"</span>, <span class=\"string\">\"a\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"f\"</span>&gt;;  <span class=\"comment\">// \"b\" | \"d\"</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T01 = Extract&lt;<span class=\"string\">\"a\"</span> | <span class=\"string\">\"b\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"d\"</span>, <span class=\"string\">\"a\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"f\"</span>&gt;;  <span class=\"comment\">// \"a\" | \"c\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T02 = Exclude&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"function\">(<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">void</span></span>), <span class=\"params\">Function</span>&gt;;  // <span class=\"params\">string</span> | <span class=\"params\">number</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T03</span> = <span class=\"params\">Extract</span>&lt;<span class=\"params\">string</span> | <span class=\"params\">number</span> | (<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">void</span></span>), <span class=\"params\">Function</span>&gt;;  // <span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T04 = NonNullable&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>&gt;;  <span class=\"comment\">// string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T05 = NonNullable&lt;<span class=\"function\">(<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">string</span></span>) | <span class=\"params\">string</span>[] | <span class=\"params\">null</span> | <span class=\"params\">undefined</span>&gt;;  // (<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">string</span></span>) | <span class=\"params\">string</span>[]</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">function</span> <span class=\"params\">f1</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">return</span> &#123; <span class=\"params\">a</span>: 1, <span class=\"params\">b</span>: <span class=\"params\">s</span> &#125;;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">class</span> <span class=\"params\">C</span> &#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">x</span> = 0;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">y</span> = 0;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T10</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">string</span>&gt;;  <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T11 = ReturnType&lt;<span class=\"function\">(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;;  <span class=\"comment\">// void</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T12 = ReturnType&lt;<span class=\"function\">(<span class=\"params\">&lt;T&gt;(<span class=\"params\"></span>) =&gt; T</span>)&gt;;  // &#123;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T13</span> = <span class=\"params\">ReturnType</span>&lt;(<span class=\"params\">&lt;T <span class=\"keyword\">extends</span> U, U <span class=\"keyword\">extends</span> <span class=\"built_in\">number</span>[]&gt;(<span class=\"params\"></span>) =&gt; T</span>)&gt;;  // <span class=\"params\">number</span>[]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T14</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">typeof</span> <span class=\"params\">f1</span>&gt;;  // &#123; <span class=\"params\">a</span>: <span class=\"params\">number</span>, <span class=\"params\">b</span>: <span class=\"params\">string</span> &#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T15</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">any</span>&gt;;  // <span class=\"params\">any</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T16</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">never</span>&gt;;  // <span class=\"params\">any</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T17</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">string</span>&gt;;  // <span class=\"params\">Error</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T18</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">Function</span>&gt;;  // <span class=\"params\">Error</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T20</span> = <span class=\"params\">InstanceType</span>&lt;<span class=\"params\">typeof</span> <span class=\"params\">C</span>&gt;;  // <span class=\"params\">CP</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T21</span> = <span class=\"params\">InstanceType</span>&lt;<span class=\"params\">any</span>&gt;;  // <span class=\"params\">any</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T22</span> = <span class=\"params\">InstanceType</span>&lt;<span class=\"params\">never</span>&gt;;  // <span class=\"params\">any</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T23</span> = <span class=\"params\">InstanceType</span>&lt;<span class=\"params\">string</span>&gt;;  // <span class=\"params\">Error</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T24</span> = <span class=\"params\">InstanceType</span>&lt;<span class=\"params\">Function</span>&gt;;  // <span class=\"params\">Error</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>高级类型与条件类型就这些,如果能够掌握他们,你就能在 ts 的海洋中任意遨游了</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"lib库中的五个高级类型\"><a href=\"#lib库中的五个高级类型\" class=\"headerlink\" title=\"lib库中的五个高级类型\"></a>lib库中的五个高级类型</h2><p><strong>以下所有例子皆以person为例</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span></span><br><span class=\"line\">  age?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial</h3><p>源码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Partial&lt;T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> keyof T]? T[P]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person2 = Partial&lt;Person&gt;</span><br><span class=\"line\"><span class=\"comment\">// person2 === &#123;name?:string; age?:number&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"Required\"></a>Required</h3><p>源码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Required&lt;T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> keyof T]-?: T[P]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type person3 = Required&lt;Person&gt;</span><br><span class=\"line\"><span class=\"comment\">// person3 === &#123;name: string; age: number&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Readonly\"><a href=\"#Readonly\" class=\"headerlink\" title=\"Readonly\"></a>Readonly</h3><p>源码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Readonly&lt;T&gt; = &#123;</span><br><span class=\"line\">  readonly [P <span class=\"keyword\">in</span> keyof T]: T[P]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person4 = Readonly&lt;Person&gt;</span><br><span class=\"line\"><span class=\"comment\">// person4 === &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   readonly name: string</span></span><br><span class=\"line\"><span class=\"comment\">//   readonly age?: number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pick\"><a href=\"#Pick\" class=\"headerlink\" title=\"Pick\"></a>Pick</h3><p>源码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Pick&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> K]: T[P]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person5 = Pick&lt;Person, <span class=\"string\">\"name\"</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// person5 = &#123;name: string&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Record\"><a href=\"#Record\" class=\"headerlink\" title=\"Record\"></a>Record</h3><p>源码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Record&lt;K <span class=\"keyword\">extends</span> ketof <span class=\"built_in\">any</span>, T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> K]: T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person6 = Recoed&lt;<span class=\"string\">'name'</span>| <span class=\"string\">'age'</span>, <span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// person6 === &#123;name: string, age: string&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件类型\"><a href=\"#条件类型\" class=\"headerlink\" title=\"条件类型\"></a>条件类型</h2><p>关于条件类型,官网上说的很详细了,我就直接拿过来</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> T00 = Exclude&lt;<span class=\"string\">\"a\"</span> | <span class=\"string\">\"b\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"d\"</span>, <span class=\"string\">\"a\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"f\"</span>&gt;;  <span class=\"comment\">// \"b\" | \"d\"</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T01 = Extract&lt;<span class=\"string\">\"a\"</span> | <span class=\"string\">\"b\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"d\"</span>, <span class=\"string\">\"a\"</span> | <span class=\"string\">\"c\"</span> | <span class=\"string\">\"f\"</span>&gt;;  <span class=\"comment\">// \"a\" | \"c\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T02 = Exclude&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"function\">(<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">void</span></span>), <span class=\"params\">Function</span>&gt;;  // <span class=\"params\">string</span> | <span class=\"params\">number</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T03</span> = <span class=\"params\">Extract</span>&lt;<span class=\"params\">string</span> | <span class=\"params\">number</span> | (<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">void</span></span>), <span class=\"params\">Function</span>&gt;;  // <span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T04 = NonNullable&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>&gt;;  <span class=\"comment\">// string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T05 = NonNullable&lt;<span class=\"function\">(<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">string</span></span>) | <span class=\"params\">string</span>[] | <span class=\"params\">null</span> | <span class=\"params\">undefined</span>&gt;;  // (<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">string</span></span>) | <span class=\"params\">string</span>[]</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">function</span> <span class=\"params\">f1</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">return</span> &#123; <span class=\"params\">a</span>: 1, <span class=\"params\">b</span>: <span class=\"params\">s</span> &#125;;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">class</span> <span class=\"params\">C</span> &#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">x</span> = 0;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"params\">y</span> = 0;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T10</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">string</span>&gt;;  <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T11 = ReturnType&lt;<span class=\"function\">(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;;  <span class=\"comment\">// void</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T12 = ReturnType&lt;<span class=\"function\">(<span class=\"params\">&lt;T&gt;(<span class=\"params\"></span>) =&gt; T</span>)&gt;;  // &#123;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T13</span> = <span class=\"params\">ReturnType</span>&lt;(<span class=\"params\">&lt;T <span class=\"keyword\">extends</span> U, U <span class=\"keyword\">extends</span> <span class=\"built_in\">number</span>[]&gt;(<span class=\"params\"></span>) =&gt; T</span>)&gt;;  // <span class=\"params\">number</span>[]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T14</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">typeof</span> <span class=\"params\">f1</span>&gt;;  // &#123; <span class=\"params\">a</span>: <span class=\"params\">number</span>, <span class=\"params\">b</span>: <span class=\"params\">string</span> &#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T15</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">any</span>&gt;;  // <span class=\"params\">any</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T16</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">never</span>&gt;;  // <span class=\"params\">any</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T17</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">string</span>&gt;;  // <span class=\"params\">Error</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T18</span> = <span class=\"params\">ReturnType</span>&lt;<span class=\"params\">Function</span>&gt;;  // <span class=\"params\">Error</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T20</span> = <span class=\"params\">InstanceType</span>&lt;<span class=\"params\">typeof</span> <span class=\"params\">C</span>&gt;;  // <span class=\"params\">CP</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T21</span> = <span class=\"params\">InstanceType</span>&lt;<span class=\"params\">any</span>&gt;;  // <span class=\"params\">any</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T22</span> = <span class=\"params\">InstanceType</span>&lt;<span class=\"params\">never</span>&gt;;  // <span class=\"params\">any</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T23</span> = <span class=\"params\">InstanceType</span>&lt;<span class=\"params\">string</span>&gt;;  // <span class=\"params\">Error</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">type</span> <span class=\"params\">T24</span> = <span class=\"params\">InstanceType</span>&lt;<span class=\"params\">Function</span>&gt;;  // <span class=\"params\">Error</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>高级类型与条件类型就这些,如果能够掌握他们,你就能在 ts 的海洋中任意遨游了</strong></p>\n"},{"title":"typescript@3.7beta","date":"2019-10-29T12:02:29.000Z","_content":"# 新增功能\n\n## 1，可选链 ?.\n\n\n```ts\n  let x = foo?.bar.baz()\n    =>\n  let x = (f===null || foo === undefined) ?\n        Undefined :\n        foo.bar.baz()\n```\n不同于&&，这个操作符仅处理null和undefined\n\n## 2，空值合并 ??\n  ```ts\n  let x = foo ?? Bar()\n  =>\n  let x = (foo!==null&&foo!==undefined) ?\n    foo :\n    bar()\n  ```\n  同可选链, 只判断null和iundefined，(|| 会有意外发生，因为 0 NaN ‘’ 会被认为是假)\n\n## 3,断言函数\n  ```ts\nfunction assertIsString(val: any): asserts val is string {\n  if (typeof val !== \"string\") {\n      throw new AssertionError(\"Not a string!\");\n  }\n}\n\nfunction yell(str: any) {\n    assertIsString(str);\n    // 现在 TypeScript 知道 'str' 是一个 'string'。\n    return str.toUppercase();\n    //         ~~~~~~~~~~~\n    // 错误：属性 'toUppercase' 在 'string' 类型上不存在。\n    //      你是说 'toUpperCase' 吗？\n}\n\n=>\n\n// 这些断言签名与编写类型断言签名非常相似\nfunction isString(val: any): val is string {\n  return typeof val === \"string\";\n}\n\nfunction yell(str: any) {\n    if (isString(str)) {\n        return str.toUppercase();\n    }\n    throw \"Oops!\";\n}\n```\n就像是类型断言签名，这些断言签名也具有难以置信的表现力。我们可以用它们表达一些相当复杂的想法。\n```ts\nfunction assertIsDefined<T>(val: T): asserts val is NonNullable<T> {\n    if (val === undefined || val === null) {\n        throw new AssertionError(\n            `Expected 'val' to be defined, but received ${val}`\n        );\n    }\n}\n```\n## 4,类型递归\n\n```ts\n\ntype Json =\n    | string\n    | number\n    | boolean\n    | null\n    | JsonObject\n    | JsonArray;\n\ninterface JsonObject {\n    [property: string]: Json;\n}\n\ninterface JsonArray extends Array<Json> {}\n\n=> \n\ntype Json =\n    | string\n    | number\n    | boolean\n    | null\n    | { [property: string]: Json }\n    | Json[];\n```\n\n这种新的宽松（模式）使我们也可以在元组中递归引用类型别名。下面这个曾经报错的代码现在是有效的 TypeScript 代码\n\n```ts\ntype VirtualNode =\n    | string\n    | [string, { [key: string]: any }, ...VirtualNode[]];\n\nconst myNode: VirtualNode =\n    [\"div\", { id: \"parent\" },\n      [\"div\", { id: \"first-child\" }, \"I'm the first child\"],\n      [\"div\", { id: \"second-child\" }, \"I'm the second child\"]\n    ]\n```\n\n## 5,未调用的函数检查\n\n  ```ts\n  interface User {\n    isAdministrator(): boolean;\n    notify(): void;\n    doNotDisturb?(): boolean;\n  }\n\n  // 稍后……\n\n  // 有问题的代码，请勿使用！\n  function doAdminThing(user: User) {\n      // 糟糕！\n      if (user.isAdministrator) {\n          sudo();\n          editTheConfiguration();\n      }\n      else {\n          throw new AccessDeniedError(\"User is not an admin\");\n      }\n  }\n```\n在这里，我们忘记了调用 isAdministrator，该代码将错误地允许非管理员用户编辑配置！\n在 TypeScript 3.7 中，这会被标识为可能的错误：\n```ts\nfunction doAdminThing(user: User) {\n    if (user.isAdministrator) {\n    //  ~~~~~~~~~~~~~~~~~~~~\n    // 错误！这个条件将始终返回 true，因为这个函数定义是一直存在的\n    //      你的意思是调用它吗？\n    }\n}\n```\nstrictNullChecks关闭或者参数或之后在 if 中调用此函数或者属性是可选的，将不会产生错误：\n```ts\ninterface User {\n    isAdministrator(): boolean;\n    notify(): void;\n    doNotDisturb?(): boolean;\n}\n\nfunction issueNotification(user: User) {\n    if (user.doNotDisturb) {\n        // OK，属性是可选的\n    }\n    if (user.notify) {\n        // OK，调用了这个方法\n        user.notify();\n    }\n}\n```\n\n以及其它...这里只列举了几项主要的.\n\n\n","source":"_posts/typescript-3-7beta.md","raw":"---\ntitle: typescript@3.7beta\ndate: 2019-10-29 20:02:29\ntags:\n---\n# 新增功能\n\n## 1，可选链 ?.\n\n\n```ts\n  let x = foo?.bar.baz()\n    =>\n  let x = (f===null || foo === undefined) ?\n        Undefined :\n        foo.bar.baz()\n```\n不同于&&，这个操作符仅处理null和undefined\n\n## 2，空值合并 ??\n  ```ts\n  let x = foo ?? Bar()\n  =>\n  let x = (foo!==null&&foo!==undefined) ?\n    foo :\n    bar()\n  ```\n  同可选链, 只判断null和iundefined，(|| 会有意外发生，因为 0 NaN ‘’ 会被认为是假)\n\n## 3,断言函数\n  ```ts\nfunction assertIsString(val: any): asserts val is string {\n  if (typeof val !== \"string\") {\n      throw new AssertionError(\"Not a string!\");\n  }\n}\n\nfunction yell(str: any) {\n    assertIsString(str);\n    // 现在 TypeScript 知道 'str' 是一个 'string'。\n    return str.toUppercase();\n    //         ~~~~~~~~~~~\n    // 错误：属性 'toUppercase' 在 'string' 类型上不存在。\n    //      你是说 'toUpperCase' 吗？\n}\n\n=>\n\n// 这些断言签名与编写类型断言签名非常相似\nfunction isString(val: any): val is string {\n  return typeof val === \"string\";\n}\n\nfunction yell(str: any) {\n    if (isString(str)) {\n        return str.toUppercase();\n    }\n    throw \"Oops!\";\n}\n```\n就像是类型断言签名，这些断言签名也具有难以置信的表现力。我们可以用它们表达一些相当复杂的想法。\n```ts\nfunction assertIsDefined<T>(val: T): asserts val is NonNullable<T> {\n    if (val === undefined || val === null) {\n        throw new AssertionError(\n            `Expected 'val' to be defined, but received ${val}`\n        );\n    }\n}\n```\n## 4,类型递归\n\n```ts\n\ntype Json =\n    | string\n    | number\n    | boolean\n    | null\n    | JsonObject\n    | JsonArray;\n\ninterface JsonObject {\n    [property: string]: Json;\n}\n\ninterface JsonArray extends Array<Json> {}\n\n=> \n\ntype Json =\n    | string\n    | number\n    | boolean\n    | null\n    | { [property: string]: Json }\n    | Json[];\n```\n\n这种新的宽松（模式）使我们也可以在元组中递归引用类型别名。下面这个曾经报错的代码现在是有效的 TypeScript 代码\n\n```ts\ntype VirtualNode =\n    | string\n    | [string, { [key: string]: any }, ...VirtualNode[]];\n\nconst myNode: VirtualNode =\n    [\"div\", { id: \"parent\" },\n      [\"div\", { id: \"first-child\" }, \"I'm the first child\"],\n      [\"div\", { id: \"second-child\" }, \"I'm the second child\"]\n    ]\n```\n\n## 5,未调用的函数检查\n\n  ```ts\n  interface User {\n    isAdministrator(): boolean;\n    notify(): void;\n    doNotDisturb?(): boolean;\n  }\n\n  // 稍后……\n\n  // 有问题的代码，请勿使用！\n  function doAdminThing(user: User) {\n      // 糟糕！\n      if (user.isAdministrator) {\n          sudo();\n          editTheConfiguration();\n      }\n      else {\n          throw new AccessDeniedError(\"User is not an admin\");\n      }\n  }\n```\n在这里，我们忘记了调用 isAdministrator，该代码将错误地允许非管理员用户编辑配置！\n在 TypeScript 3.7 中，这会被标识为可能的错误：\n```ts\nfunction doAdminThing(user: User) {\n    if (user.isAdministrator) {\n    //  ~~~~~~~~~~~~~~~~~~~~\n    // 错误！这个条件将始终返回 true，因为这个函数定义是一直存在的\n    //      你的意思是调用它吗？\n    }\n}\n```\nstrictNullChecks关闭或者参数或之后在 if 中调用此函数或者属性是可选的，将不会产生错误：\n```ts\ninterface User {\n    isAdministrator(): boolean;\n    notify(): void;\n    doNotDisturb?(): boolean;\n}\n\nfunction issueNotification(user: User) {\n    if (user.doNotDisturb) {\n        // OK，属性是可选的\n    }\n    if (user.notify) {\n        // OK，调用了这个方法\n        user.notify();\n    }\n}\n```\n\n以及其它...这里只列举了几项主要的.\n\n\n","slug":"typescript-3-7beta","published":1,"updated":"2019-11-14T03:28:46.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck54n2yii0001jigjci3bc8tr","content":"<h1 id=\"新增功能\"><a href=\"#新增功能\" class=\"headerlink\" title=\"新增功能\"></a>新增功能</h1><h2 id=\"1，可选链\"><a href=\"#1，可选链\" class=\"headerlink\" title=\"1，可选链 ?.\"></a>1，可选链 ?.</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = foo?.bar.baz()</span><br><span class=\"line\">  =&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = (f===<span class=\"literal\">null</span> || foo === <span class=\"literal\">undefined</span>) ?</span><br><span class=\"line\">      Undefined :</span><br><span class=\"line\">      foo.bar.baz()</span><br></pre></td></tr></table></figure>\n<p>不同于&amp;&amp;，这个操作符仅处理null和undefined</p>\n<h2 id=\"2，空值合并\"><a href=\"#2，空值合并\" class=\"headerlink\" title=\"2，空值合并 ??\"></a>2，空值合并 ??</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = foo ?? Bar()</span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = (foo!==<span class=\"literal\">null</span>&amp;&amp;foo!==<span class=\"literal\">undefined</span>) ?</span><br><span class=\"line\">  foo :</span><br><span class=\"line\">  bar()</span><br></pre></td></tr></table></figure>\n<p>  同可选链, 只判断null和iundefined，(|| 会有意外发生，因为 0 NaN ‘’ 会被认为是假)</p>\n<h2 id=\"3-断言函数\"><a href=\"#3-断言函数\" class=\"headerlink\" title=\"3,断言函数\"></a>3,断言函数</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertIsString</span>(<span class=\"params\">val: <span class=\"built_in\">any</span></span>): <span class=\"title\">asserts</span> <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val !== <span class=\"string\">\"string\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"Not a string!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">yell</span>(<span class=\"params\">str: <span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">    assertIsString(str);</span><br><span class=\"line\">    <span class=\"comment\">// 现在 TypeScript 知道 'str' 是一个 'string'。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.toUppercase();</span><br><span class=\"line\">    <span class=\"comment\">//         ~~~~~~~~~~~</span></span><br><span class=\"line\">    <span class=\"comment\">// 错误：属性 'toUppercase' 在 'string' 类型上不存在。</span></span><br><span class=\"line\">    <span class=\"comment\">//      你是说 'toUpperCase' 吗？</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这些断言签名与编写类型断言签名非常相似</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">val: <span class=\"built_in\">any</span></span>): <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">yell</span>(<span class=\"params\">str: <span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isString(str)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.toUppercase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">\"Oops!\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就像是类型断言签名，这些断言签名也具有难以置信的表现力。我们可以用它们表达一些相当复杂的想法。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertIsDefined</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">val: T</span>): <span class=\"title\">asserts</span> <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">NonNullable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val === <span class=\"literal\">undefined</span> || val === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(</span><br><span class=\"line\">            <span class=\"string\">`Expected 'val' to be defined, but received <span class=\"subst\">$&#123;val&#125;</span>`</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-类型递归\"><a href=\"#4-类型递归\" class=\"headerlink\" title=\"4,类型递归\"></a>4,类型递归</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Json =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | <span class=\"built_in\">number</span></span><br><span class=\"line\">    | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">    | <span class=\"literal\">null</span></span><br><span class=\"line\">    | JsonObject</span><br><span class=\"line\">    | JsonArray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> JsonObject &#123;</span><br><span class=\"line\">    [property: <span class=\"built_in\">string</span>]: Json;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> JsonArray <span class=\"keyword\">extends</span> Array&lt;Json&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Json =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | <span class=\"built_in\">number</span></span><br><span class=\"line\">    | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">    | <span class=\"literal\">null</span></span><br><span class=\"line\">    | &#123; [property: <span class=\"built_in\">string</span>]: Json &#125;</span><br><span class=\"line\">    | Json[];</span><br></pre></td></tr></table></figure>\n\n<p>这种新的宽松（模式）使我们也可以在元组中递归引用类型别名。下面这个曾经报错的代码现在是有效的 TypeScript 代码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> VirtualNode =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | [<span class=\"built_in\">string</span>, &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> &#125;, ...VirtualNode[]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myNode: VirtualNode =</span><br><span class=\"line\">    [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"parent\"</span> &#125;,</span><br><span class=\"line\">      [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"first-child\"</span> &#125;, <span class=\"string\">\"I'm the first child\"</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"second-child\"</span> &#125;, <span class=\"string\">\"I'm the second child\"</span>]</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-未调用的函数检查\"><a href=\"#5-未调用的函数检查\" class=\"headerlink\" title=\"5,未调用的函数检查\"></a>5,未调用的函数检查</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">  isAdministrator(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  notify(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  doNotDisturb?(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 稍后……</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有问题的代码，请勿使用！</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdminThing</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 糟糕！</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.isAdministrator) &#123;</span><br><span class=\"line\">        sudo();</span><br><span class=\"line\">        editTheConfiguration();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AccessDeniedError(<span class=\"string\">\"User is not an admin\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里，我们忘记了调用 isAdministrator，该代码将错误地允许非管理员用户编辑配置！<br>在 TypeScript 3.7 中，这会被标识为可能的错误：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdminThing</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.isAdministrator) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  ~~~~~~~~~~~~~~~~~~~~</span></span><br><span class=\"line\">    <span class=\"comment\">// 错误！这个条件将始终返回 true，因为这个函数定义是一直存在的</span></span><br><span class=\"line\">    <span class=\"comment\">//      你的意思是调用它吗？</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>strictNullChecks关闭或者参数或之后在 if 中调用此函数或者属性是可选的，将不会产生错误：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">    isAdministrator(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    notify(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    doNotDisturb?(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">issueNotification</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.doNotDisturb) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// OK，属性是可选的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.notify) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// OK，调用了这个方法</span></span><br><span class=\"line\">        user.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以及其它…这里只列举了几项主要的.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"新增功能\"><a href=\"#新增功能\" class=\"headerlink\" title=\"新增功能\"></a>新增功能</h1><h2 id=\"1，可选链\"><a href=\"#1，可选链\" class=\"headerlink\" title=\"1，可选链 ?.\"></a>1，可选链 ?.</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = foo?.bar.baz()</span><br><span class=\"line\">  =&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = (f===<span class=\"literal\">null</span> || foo === <span class=\"literal\">undefined</span>) ?</span><br><span class=\"line\">      Undefined :</span><br><span class=\"line\">      foo.bar.baz()</span><br></pre></td></tr></table></figure>\n<p>不同于&amp;&amp;，这个操作符仅处理null和undefined</p>\n<h2 id=\"2，空值合并\"><a href=\"#2，空值合并\" class=\"headerlink\" title=\"2，空值合并 ??\"></a>2，空值合并 ??</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = foo ?? Bar()</span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = (foo!==<span class=\"literal\">null</span>&amp;&amp;foo!==<span class=\"literal\">undefined</span>) ?</span><br><span class=\"line\">  foo :</span><br><span class=\"line\">  bar()</span><br></pre></td></tr></table></figure>\n<p>  同可选链, 只判断null和iundefined，(|| 会有意外发生，因为 0 NaN ‘’ 会被认为是假)</p>\n<h2 id=\"3-断言函数\"><a href=\"#3-断言函数\" class=\"headerlink\" title=\"3,断言函数\"></a>3,断言函数</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertIsString</span>(<span class=\"params\">val: <span class=\"built_in\">any</span></span>): <span class=\"title\">asserts</span> <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val !== <span class=\"string\">\"string\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"Not a string!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">yell</span>(<span class=\"params\">str: <span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">    assertIsString(str);</span><br><span class=\"line\">    <span class=\"comment\">// 现在 TypeScript 知道 'str' 是一个 'string'。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.toUppercase();</span><br><span class=\"line\">    <span class=\"comment\">//         ~~~~~~~~~~~</span></span><br><span class=\"line\">    <span class=\"comment\">// 错误：属性 'toUppercase' 在 'string' 类型上不存在。</span></span><br><span class=\"line\">    <span class=\"comment\">//      你是说 'toUpperCase' 吗？</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这些断言签名与编写类型断言签名非常相似</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">val: <span class=\"built_in\">any</span></span>): <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">yell</span>(<span class=\"params\">str: <span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isString(str)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.toUppercase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">\"Oops!\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就像是类型断言签名，这些断言签名也具有难以置信的表现力。我们可以用它们表达一些相当复杂的想法。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertIsDefined</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">val: T</span>): <span class=\"title\">asserts</span> <span class=\"title\">val</span> <span class=\"title\">is</span> <span class=\"title\">NonNullable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val === <span class=\"literal\">undefined</span> || val === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(</span><br><span class=\"line\">            <span class=\"string\">`Expected 'val' to be defined, but received <span class=\"subst\">$&#123;val&#125;</span>`</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-类型递归\"><a href=\"#4-类型递归\" class=\"headerlink\" title=\"4,类型递归\"></a>4,类型递归</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Json =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | <span class=\"built_in\">number</span></span><br><span class=\"line\">    | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">    | <span class=\"literal\">null</span></span><br><span class=\"line\">    | JsonObject</span><br><span class=\"line\">    | JsonArray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> JsonObject &#123;</span><br><span class=\"line\">    [property: <span class=\"built_in\">string</span>]: Json;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> JsonArray <span class=\"keyword\">extends</span> Array&lt;Json&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Json =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | <span class=\"built_in\">number</span></span><br><span class=\"line\">    | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">    | <span class=\"literal\">null</span></span><br><span class=\"line\">    | &#123; [property: <span class=\"built_in\">string</span>]: Json &#125;</span><br><span class=\"line\">    | Json[];</span><br></pre></td></tr></table></figure>\n\n<p>这种新的宽松（模式）使我们也可以在元组中递归引用类型别名。下面这个曾经报错的代码现在是有效的 TypeScript 代码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> VirtualNode =</span><br><span class=\"line\">    | <span class=\"built_in\">string</span></span><br><span class=\"line\">    | [<span class=\"built_in\">string</span>, &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> &#125;, ...VirtualNode[]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myNode: VirtualNode =</span><br><span class=\"line\">    [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"parent\"</span> &#125;,</span><br><span class=\"line\">      [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"first-child\"</span> &#125;, <span class=\"string\">\"I'm the first child\"</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"div\"</span>, &#123; id: <span class=\"string\">\"second-child\"</span> &#125;, <span class=\"string\">\"I'm the second child\"</span>]</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-未调用的函数检查\"><a href=\"#5-未调用的函数检查\" class=\"headerlink\" title=\"5,未调用的函数检查\"></a>5,未调用的函数检查</h2>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">  isAdministrator(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  notify(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  doNotDisturb?(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 稍后……</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有问题的代码，请勿使用！</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdminThing</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 糟糕！</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.isAdministrator) &#123;</span><br><span class=\"line\">        sudo();</span><br><span class=\"line\">        editTheConfiguration();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AccessDeniedError(<span class=\"string\">\"User is not an admin\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里，我们忘记了调用 isAdministrator，该代码将错误地允许非管理员用户编辑配置！<br>在 TypeScript 3.7 中，这会被标识为可能的错误：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdminThing</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.isAdministrator) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  ~~~~~~~~~~~~~~~~~~~~</span></span><br><span class=\"line\">    <span class=\"comment\">// 错误！这个条件将始终返回 true，因为这个函数定义是一直存在的</span></span><br><span class=\"line\">    <span class=\"comment\">//      你的意思是调用它吗？</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>strictNullChecks关闭或者参数或之后在 if 中调用此函数或者属性是可选的，将不会产生错误：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">    isAdministrator(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    notify(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    doNotDisturb?(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">issueNotification</span>(<span class=\"params\">user: User</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.doNotDisturb) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// OK，属性是可选的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.notify) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// OK，调用了这个方法</span></span><br><span class=\"line\">        user.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以及其它…这里只列举了几项主要的.</p>\n"},{"title":"JS中的位运算","date":"2019-11-07T06:01:52.000Z","_content":"# 1,内容概要\n* JavaScript 的位运算：先简单回顾下位运算，平时用的少，相信不少人和我一样忘的差不多了\n* 权限设计：根据位运算的特点，设计一个权限系统（添加、删除、判断等）\n\n# 2.JavaScript 位运算\n\n## 2.1 Number\n在讲位运算之前，首先简单看下JavaScript中的Number，下文需要用到\n\n在 JavaScript 里，数字均为基于 IEEE 754 标准的双精度 64 位的浮点数，引用维基百科的图片，它的结构长这样：\n![IEEE 754](JS中的位运算/ieee754.png))\n\n## 2.2位运算\n按位操作符将其操作数当作 32 位的比特序列（由 0 和 1 组成）操作，返回值依然是标准的 JavaScript 数值。JavaScript 中的按位操作符有：\n\n | 运算符             | 用法        | 描述                                                                              |\n | ------------------ | ----------- | --------------------------------------------------------------------------------- |\n | 按位与 (AND)       | a & b       | 对于每一个比特位，只有两个操作数相应的特位都是 1 时，结果才为 1，否则为 0。       |\n | 按位或（OR）       | a      \\| b | 对于每一个比特位，当两个操作数相应的比特位至少有一个 1 时，结果为 1，否则为 0。   |\n | 按位异或（XOR）    | a ^ b       | 对于每一个比特位，当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0。 |\n | 按位非（NOT）      | ~a          | 反转操作数的比特位，即 0 变成 1，1 变成 0。                                       |\n | 左移（Left shift） | a << b      | 将 a 的二进制形式向左移 b (< 32) 比特位，右边用 0 填充。                          |\n | 有符号右移         | a >> b      | 将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位。                             |\n | 无符号右移         | a >>> b     | 将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位，并使用 0 在左侧填充。        |\n\n### 下面举几个例子，主要看下 AND 和 OR：\n```shell\n# 例子1\n    A = 10001001\n    B = 10010000\nA | B = 10011001\n\n# 例子2\n    A = 10001001\n    C = 10001000\nA | C = 10001001\n\n```\n\n```shell\n# 例子1\n    A = 10001001\n    B = 10010000\nA & B = 10000000\n\n# 例子2\n    A = 10001001\n    C = 10001000\nA & C = 10001000\n\n```\n\n# 3. 位运算在权限系统中的使用\n\n传统的权限系统里，存在很多关联关系，如用户和权限的关联，用户和角色的关联。系统越大，关联关系越多，越难以维护。而引入位运算，可以巧妙的解决该问题。\n\n在讲“位运算在权限系统中的使用”之前，我们先假定两个前提，下文所有的讨论都是基于这两个前提的：\n1. 每种权限码都是唯一的（这是显然的）\n2. 所有权限码的二进制数形式，有且只有一位值为 1，其余全部为 0（2^n）\n\n#### 如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：\n\n* | 可以用来赋予权限\n* & 可以用来校验权限\n\n\n#### 为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式\n\n| 权限 | 字母表示 | 数字表示 | 二进制 |\n| ---- | -------- | -------- | ------ |\n| 读   | r        | 4        | 0b100  |\n| 写   | w        | 2        | 0b010  |\n| 执行 | x        | 1        | 0b001  |\n\n可以看到，权限用 1、2、4（也就是 2^n）表示，转换为二进制后，都是只有一位是 1，其余为 0。我们通过几个例子看下，如何利用二进制的特点执行权限的添加，校验和删除。\n\n## 3.1. 添加权限\n\n```js\nlet r = 0b100\nlet w = 0b010\nlet x = 0b001\n\n// 给用户赋全部权限（使用前面讲的 | 操作）\nlet user = r | w | x\n\nconsole.log(user)\n// 7\n\nconsole.log(user.toString(2))\n// 111\n\n//     r = 0b100\n//     w = 0b010\n//     r = 0b001\n// r|w|x = 0b111\n\n```\n\n可以看到，执行 r | w | x 后，user 的三位都是 1，表明拥有了全部三个权限。\n\n\n> Linux 下出现权限问题时，最粗暴的解决方案就是 chmod 777 xxx，这里的 7 就代表了：可读，可写，可执行。而三个 7 分别代表：文件所有者，文件所有者所在 组，所有其他用户。\n\n### 3.3 校验权限\n刚才演示了权限的添加，下面演示权限校验：\n\n```js\nlet r = 0b100\nlet w = 0b010\nlet x = 0b001\n\n// 给用户赋 r w 两个权限\nlet user = r | w\n// user = 6\n// user = 0b110 (二进制)\n\nconsole.log((user & r) === r) // true  有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n```\n\n如前所料，通过 用户权限 & 权限 code === 权限 code 就可以判断出用户是否拥有该权限。\n\n### 3.3删除权限\n我们讲了用 | 赋予权限，使用 & 判断权限，那么删除权限呢？删除权限的本质其实是将指定位置上的 1 重置为 0。上个例子里用户权限是 0b110，拥有读和写两个权限，现在想删除读的权限，本质上就是将第三位的 1 重置为 0，变为 0b010：\n\n```js\nlet r = 0b100\nlet w = 0b010\nlet x = 0b001\n\nlet user = 0b010;\n\nconsole.log((user & r) === r) // false 没有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n```\n\n那么具体怎么操作呢？其实有两种方案，最简单的就是异或 ^，按照上文的介绍“当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0”，所以异或其实是 toggle 操作，无则增，有则减：\n\n```js \nlet r    = 0b100\nlet w    = 0b010\nlet x    = 0b001\nlet user = 0b110 // 有 r w 两个权限\n\n// 执行异或操作，删除 r 权限\nuser = user ^ r\n\nconsole.log((user & r) === r) // false 没有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n\nconsole.log(user.toString(2)) // 现在 user 是 0b010\n\n// 再执行一次异或操作\nuser = user ^ r\n\nconsole.log((user & r) === r) // true  有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n\nconsole.log(user.toString(2)) // 现在 user 又变回 0b110\n\n```\n\n那么如果单纯的想删除权限（而不是无则增，有则减）怎么办呢？答案是执行 &(~code)，先取反，再执行与操作：\n\n```js\n\nlet r    = 0b100\nlet w    = 0b010\nlet x    = 0b001\nlet user = 0b110 // 有 r w 两个权限\n\n// 删除 r 权限\nuser = user & (~r)\n\nconsole.log((user & r) === r) // false 没有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n\nconsole.log(user.toString(2)) // 现在 user 是 0b010\n\n// 再执行一次\nuser = user & (~r)\n\nconsole.log((user & r) === r) // false 没有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n\nconsole.log(user.toString(2)) // 现在 user 还是 0b010，并不会新增\n```\n\n# 4. 局限性和解决办法\n前面我们回顾了 JavaScript 中的 Number 和位运算，并且了解了基于位运算的权限系统原理和 Linux 文件系统权限的实例。\n\n\n上述的所有都有前提条件：1、每种权限码都是唯一的；2、每个权限码的二进制数形式，有且只有一位值为 1（2^n）。也就是说，权限码只能是 1, 2, 4, 8,...,1024,...而上文提到，一个数字的范围只能在 -(2^53 -1) 和 2^53 -1 之间，JavaScript 的按位操作符又是将其操作数当作 32 位比特序列的。那么同一个应用下可用的权限数就非常有限了。这也是该方案的局限性。\n为了突破这个限制，这里提出一个叫“权限空间”的概念，既然权限数有限，那么不妨就多开辟几个空间来存放。","source":"_posts/JS中的位运算.md","raw":"---\ntitle: JS中的位运算\ndate: 2019-11-07 14:01:52\ntags:\n---\n# 1,内容概要\n* JavaScript 的位运算：先简单回顾下位运算，平时用的少，相信不少人和我一样忘的差不多了\n* 权限设计：根据位运算的特点，设计一个权限系统（添加、删除、判断等）\n\n# 2.JavaScript 位运算\n\n## 2.1 Number\n在讲位运算之前，首先简单看下JavaScript中的Number，下文需要用到\n\n在 JavaScript 里，数字均为基于 IEEE 754 标准的双精度 64 位的浮点数，引用维基百科的图片，它的结构长这样：\n![IEEE 754](JS中的位运算/ieee754.png))\n\n## 2.2位运算\n按位操作符将其操作数当作 32 位的比特序列（由 0 和 1 组成）操作，返回值依然是标准的 JavaScript 数值。JavaScript 中的按位操作符有：\n\n | 运算符             | 用法        | 描述                                                                              |\n | ------------------ | ----------- | --------------------------------------------------------------------------------- |\n | 按位与 (AND)       | a & b       | 对于每一个比特位，只有两个操作数相应的特位都是 1 时，结果才为 1，否则为 0。       |\n | 按位或（OR）       | a      \\| b | 对于每一个比特位，当两个操作数相应的比特位至少有一个 1 时，结果为 1，否则为 0。   |\n | 按位异或（XOR）    | a ^ b       | 对于每一个比特位，当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0。 |\n | 按位非（NOT）      | ~a          | 反转操作数的比特位，即 0 变成 1，1 变成 0。                                       |\n | 左移（Left shift） | a << b      | 将 a 的二进制形式向左移 b (< 32) 比特位，右边用 0 填充。                          |\n | 有符号右移         | a >> b      | 将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位。                             |\n | 无符号右移         | a >>> b     | 将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位，并使用 0 在左侧填充。        |\n\n### 下面举几个例子，主要看下 AND 和 OR：\n```shell\n# 例子1\n    A = 10001001\n    B = 10010000\nA | B = 10011001\n\n# 例子2\n    A = 10001001\n    C = 10001000\nA | C = 10001001\n\n```\n\n```shell\n# 例子1\n    A = 10001001\n    B = 10010000\nA & B = 10000000\n\n# 例子2\n    A = 10001001\n    C = 10001000\nA & C = 10001000\n\n```\n\n# 3. 位运算在权限系统中的使用\n\n传统的权限系统里，存在很多关联关系，如用户和权限的关联，用户和角色的关联。系统越大，关联关系越多，越难以维护。而引入位运算，可以巧妙的解决该问题。\n\n在讲“位运算在权限系统中的使用”之前，我们先假定两个前提，下文所有的讨论都是基于这两个前提的：\n1. 每种权限码都是唯一的（这是显然的）\n2. 所有权限码的二进制数形式，有且只有一位值为 1，其余全部为 0（2^n）\n\n#### 如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：\n\n* | 可以用来赋予权限\n* & 可以用来校验权限\n\n\n#### 为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式\n\n| 权限 | 字母表示 | 数字表示 | 二进制 |\n| ---- | -------- | -------- | ------ |\n| 读   | r        | 4        | 0b100  |\n| 写   | w        | 2        | 0b010  |\n| 执行 | x        | 1        | 0b001  |\n\n可以看到，权限用 1、2、4（也就是 2^n）表示，转换为二进制后，都是只有一位是 1，其余为 0。我们通过几个例子看下，如何利用二进制的特点执行权限的添加，校验和删除。\n\n## 3.1. 添加权限\n\n```js\nlet r = 0b100\nlet w = 0b010\nlet x = 0b001\n\n// 给用户赋全部权限（使用前面讲的 | 操作）\nlet user = r | w | x\n\nconsole.log(user)\n// 7\n\nconsole.log(user.toString(2))\n// 111\n\n//     r = 0b100\n//     w = 0b010\n//     r = 0b001\n// r|w|x = 0b111\n\n```\n\n可以看到，执行 r | w | x 后，user 的三位都是 1，表明拥有了全部三个权限。\n\n\n> Linux 下出现权限问题时，最粗暴的解决方案就是 chmod 777 xxx，这里的 7 就代表了：可读，可写，可执行。而三个 7 分别代表：文件所有者，文件所有者所在 组，所有其他用户。\n\n### 3.3 校验权限\n刚才演示了权限的添加，下面演示权限校验：\n\n```js\nlet r = 0b100\nlet w = 0b010\nlet x = 0b001\n\n// 给用户赋 r w 两个权限\nlet user = r | w\n// user = 6\n// user = 0b110 (二进制)\n\nconsole.log((user & r) === r) // true  有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n```\n\n如前所料，通过 用户权限 & 权限 code === 权限 code 就可以判断出用户是否拥有该权限。\n\n### 3.3删除权限\n我们讲了用 | 赋予权限，使用 & 判断权限，那么删除权限呢？删除权限的本质其实是将指定位置上的 1 重置为 0。上个例子里用户权限是 0b110，拥有读和写两个权限，现在想删除读的权限，本质上就是将第三位的 1 重置为 0，变为 0b010：\n\n```js\nlet r = 0b100\nlet w = 0b010\nlet x = 0b001\n\nlet user = 0b010;\n\nconsole.log((user & r) === r) // false 没有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n```\n\n那么具体怎么操作呢？其实有两种方案，最简单的就是异或 ^，按照上文的介绍“当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0”，所以异或其实是 toggle 操作，无则增，有则减：\n\n```js \nlet r    = 0b100\nlet w    = 0b010\nlet x    = 0b001\nlet user = 0b110 // 有 r w 两个权限\n\n// 执行异或操作，删除 r 权限\nuser = user ^ r\n\nconsole.log((user & r) === r) // false 没有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n\nconsole.log(user.toString(2)) // 现在 user 是 0b010\n\n// 再执行一次异或操作\nuser = user ^ r\n\nconsole.log((user & r) === r) // true  有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n\nconsole.log(user.toString(2)) // 现在 user 又变回 0b110\n\n```\n\n那么如果单纯的想删除权限（而不是无则增，有则减）怎么办呢？答案是执行 &(~code)，先取反，再执行与操作：\n\n```js\n\nlet r    = 0b100\nlet w    = 0b010\nlet x    = 0b001\nlet user = 0b110 // 有 r w 两个权限\n\n// 删除 r 权限\nuser = user & (~r)\n\nconsole.log((user & r) === r) // false 没有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n\nconsole.log(user.toString(2)) // 现在 user 是 0b010\n\n// 再执行一次\nuser = user & (~r)\n\nconsole.log((user & r) === r) // false 没有 r 权限\nconsole.log((user & w) === w) // true  有 w 权限\nconsole.log((user & x) === x) // false 没有 x 权限\n\nconsole.log(user.toString(2)) // 现在 user 还是 0b010，并不会新增\n```\n\n# 4. 局限性和解决办法\n前面我们回顾了 JavaScript 中的 Number 和位运算，并且了解了基于位运算的权限系统原理和 Linux 文件系统权限的实例。\n\n\n上述的所有都有前提条件：1、每种权限码都是唯一的；2、每个权限码的二进制数形式，有且只有一位值为 1（2^n）。也就是说，权限码只能是 1, 2, 4, 8,...,1024,...而上文提到，一个数字的范围只能在 -(2^53 -1) 和 2^53 -1 之间，JavaScript 的按位操作符又是将其操作数当作 32 位比特序列的。那么同一个应用下可用的权限数就非常有限了。这也是该方案的局限性。\n为了突破这个限制，这里提出一个叫“权限空间”的概念，既然权限数有限，那么不妨就多开辟几个空间来存放。","slug":"JS中的位运算","published":1,"updated":"2019-11-14T03:22:05.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck54n2yiw0002jigjani57zyp","content":"<h1 id=\"1-内容概要\"><a href=\"#1-内容概要\" class=\"headerlink\" title=\"1,内容概要\"></a>1,内容概要</h1><ul>\n<li>JavaScript 的位运算：先简单回顾下位运算，平时用的少，相信不少人和我一样忘的差不多了</li>\n<li>权限设计：根据位运算的特点，设计一个权限系统（添加、删除、判断等）</li>\n</ul>\n<h1 id=\"2-JavaScript-位运算\"><a href=\"#2-JavaScript-位运算\" class=\"headerlink\" title=\"2.JavaScript 位运算\"></a>2.JavaScript 位运算</h1><h2 id=\"2-1-Number\"><a href=\"#2-1-Number\" class=\"headerlink\" title=\"2.1 Number\"></a>2.1 Number</h2><p>在讲位运算之前，首先简单看下JavaScript中的Number，下文需要用到</p>\n<p>在 JavaScript 里，数字均为基于 IEEE 754 标准的双精度 64 位的浮点数，引用维基百科的图片，它的结构长这样：<br><img src=\"/.99//ieee754.png\" alt=\"IEEE 754\">))</p>\n<h2 id=\"2-2位运算\"><a href=\"#2-2位运算\" class=\"headerlink\" title=\"2.2位运算\"></a>2.2位运算</h2><p>按位操作符将其操作数当作 32 位的比特序列（由 0 和 1 组成）操作，返回值依然是标准的 JavaScript 数值。JavaScript 中的按位操作符有：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>按位与 (AND)</td>\n<td>a &amp; b</td>\n<td>对于每一个比特位，只有两个操作数相应的特位都是 1 时，结果才为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位或（OR）</td>\n<td>a      | b</td>\n<td>对于每一个比特位，当两个操作数相应的比特位至少有一个 1 时，结果为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位异或（XOR）</td>\n<td>a ^ b</td>\n<td>对于每一个比特位，当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位非（NOT）</td>\n<td>~a</td>\n<td>反转操作数的比特位，即 0 变成 1，1 变成 0。</td>\n</tr>\n<tr>\n<td>左移（Left shift）</td>\n<td>a &lt;&lt; b</td>\n<td>将 a 的二进制形式向左移 b (&lt; 32) 比特位，右边用 0 填充。</td>\n</tr>\n<tr>\n<td>有符号右移</td>\n<td>a &gt;&gt; b</td>\n<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位。</td>\n</tr>\n<tr>\n<td>无符号右移</td>\n<td>a &gt;&gt;&gt; b</td>\n<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td>\n</tr>\n</tbody></table>\n<h3 id=\"下面举几个例子，主要看下-AND-和-OR：\"><a href=\"#下面举几个例子，主要看下-AND-和-OR：\" class=\"headerlink\" title=\"下面举几个例子，主要看下 AND 和 OR：\"></a>下面举几个例子，主要看下 AND 和 OR：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子1</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    B = 10010000</span><br><span class=\"line\">A | B = 10011001</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子2</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    C = 10001000</span><br><span class=\"line\">A | C = 10001001</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子1</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    B = 10010000</span><br><span class=\"line\">A &amp; B = 10000000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子2</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    C = 10001000</span><br><span class=\"line\">A &amp; C = 10001000</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-位运算在权限系统中的使用\"><a href=\"#3-位运算在权限系统中的使用\" class=\"headerlink\" title=\"3. 位运算在权限系统中的使用\"></a>3. 位运算在权限系统中的使用</h1><p>传统的权限系统里，存在很多关联关系，如用户和权限的关联，用户和角色的关联。系统越大，关联关系越多，越难以维护。而引入位运算，可以巧妙的解决该问题。</p>\n<p>在讲“位运算在权限系统中的使用”之前，我们先假定两个前提，下文所有的讨论都是基于这两个前提的：</p>\n<ol>\n<li>每种权限码都是唯一的（这是显然的）</li>\n<li>所有权限码的二进制数形式，有且只有一位值为 1，其余全部为 0（2^n）</li>\n</ol>\n<h4 id=\"如果用户权限和权限码，全部使用二级制数字表示，再结合上面-AND-和-OR-的例子，分析位运算的特点，不难发现：\"><a href=\"#如果用户权限和权限码，全部使用二级制数字表示，再结合上面-AND-和-OR-的例子，分析位运算的特点，不难发现：\" class=\"headerlink\" title=\"如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：\"></a>如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：</h4><ul>\n<li>| 可以用来赋予权限</li>\n<li>&amp; 可以用来校验权限</li>\n</ul>\n<h4 id=\"为了讲的更明白，这里用-Linux-中的实例分析下，Linux-的文件权限分为读、写和执行，有字母和数字等多种表现形式\"><a href=\"#为了讲的更明白，这里用-Linux-中的实例分析下，Linux-的文件权限分为读、写和执行，有字母和数字等多种表现形式\" class=\"headerlink\" title=\"为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式\"></a>为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式</h4><table>\n<thead>\n<tr>\n<th>权限</th>\n<th>字母表示</th>\n<th>数字表示</th>\n<th>二进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读</td>\n<td>r</td>\n<td>4</td>\n<td>0b100</td>\n</tr>\n<tr>\n<td>写</td>\n<td>w</td>\n<td>2</td>\n<td>0b010</td>\n</tr>\n<tr>\n<td>执行</td>\n<td>x</td>\n<td>1</td>\n<td>0b001</td>\n</tr>\n</tbody></table>\n<p>可以看到，权限用 1、2、4（也就是 2^n）表示，转换为二进制后，都是只有一位是 1，其余为 0。我们通过几个例子看下，如何利用二进制的特点执行权限的添加，校验和删除。</p>\n<h2 id=\"3-1-添加权限\"><a href=\"#3-1-添加权限\" class=\"headerlink\" title=\"3.1. 添加权限\"></a>3.1. 添加权限</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> r = <span class=\"number\">0b100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"number\">0b010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">0b001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给用户赋全部权限（使用前面讲的 | 操作）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = r | w | x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user)</span><br><span class=\"line\"><span class=\"comment\">// 7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.toString(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// 111</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     r = 0b100</span></span><br><span class=\"line\"><span class=\"comment\">//     w = 0b010</span></span><br><span class=\"line\"><span class=\"comment\">//     r = 0b001</span></span><br><span class=\"line\"><span class=\"comment\">// r|w|x = 0b111</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，执行 r | w | x 后，user 的三位都是 1，表明拥有了全部三个权限。</p>\n<blockquote>\n<p>Linux 下出现权限问题时，最粗暴的解决方案就是 chmod 777 xxx，这里的 7 就代表了：可读，可写，可执行。而三个 7 分别代表：文件所有者，文件所有者所在 组，所有其他用户。</p>\n</blockquote>\n<h3 id=\"3-3-校验权限\"><a href=\"#3-3-校验权限\" class=\"headerlink\" title=\"3.3 校验权限\"></a>3.3 校验权限</h3><p>刚才演示了权限的添加，下面演示权限校验：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> r = <span class=\"number\">0b100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"number\">0b010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">0b001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给用户赋 r w 两个权限</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = r | w</span><br><span class=\"line\"><span class=\"comment\">// user = 6</span></span><br><span class=\"line\"><span class=\"comment\">// user = 0b110 (二进制)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// true  有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br></pre></td></tr></table></figure>\n\n<p>如前所料，通过 用户权限 &amp; 权限 code === 权限 code 就可以判断出用户是否拥有该权限。</p>\n<h3 id=\"3-3删除权限\"><a href=\"#3-3删除权限\" class=\"headerlink\" title=\"3.3删除权限\"></a>3.3删除权限</h3><p>我们讲了用 | 赋予权限，使用 &amp; 判断权限，那么删除权限呢？删除权限的本质其实是将指定位置上的 1 重置为 0。上个例子里用户权限是 0b110，拥有读和写两个权限，现在想删除读的权限，本质上就是将第三位的 1 重置为 0，变为 0b010：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> r = <span class=\"number\">0b100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"number\">0b010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">0b001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"number\">0b010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// false 没有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br></pre></td></tr></table></figure>\n\n<p>那么具体怎么操作呢？其实有两种方案，最简单的就是异或 ^，按照上文的介绍“当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0”，所以异或其实是 toggle 操作，无则增，有则减：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> r    = <span class=\"number\">0b100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> w    = <span class=\"number\">0b010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x    = <span class=\"number\">0b001</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"number\">0b110</span> <span class=\"comment\">// 有 r w 两个权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行异或操作，删除 r 权限</span></span><br><span class=\"line\">user = user ^ r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// false 没有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.toString(<span class=\"number\">2</span>)) <span class=\"comment\">// 现在 user 是 0b010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再执行一次异或操作</span></span><br><span class=\"line\">user = user ^ r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// true  有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.toString(<span class=\"number\">2</span>)) <span class=\"comment\">// 现在 user 又变回 0b110</span></span><br></pre></td></tr></table></figure>\n\n<p>那么如果单纯的想删除权限（而不是无则增，有则减）怎么办呢？答案是执行 &amp;(~code)，先取反，再执行与操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> r    = <span class=\"number\">0b100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> w    = <span class=\"number\">0b010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x    = <span class=\"number\">0b001</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"number\">0b110</span> <span class=\"comment\">// 有 r w 两个权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除 r 权限</span></span><br><span class=\"line\">user = user &amp; (~r)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// false 没有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.toString(<span class=\"number\">2</span>)) <span class=\"comment\">// 现在 user 是 0b010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再执行一次</span></span><br><span class=\"line\">user = user &amp; (~r)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// false 没有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.toString(<span class=\"number\">2</span>)) <span class=\"comment\">// 现在 user 还是 0b010，并不会新增</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-局限性和解决办法\"><a href=\"#4-局限性和解决办法\" class=\"headerlink\" title=\"4. 局限性和解决办法\"></a>4. 局限性和解决办法</h1><p>前面我们回顾了 JavaScript 中的 Number 和位运算，并且了解了基于位运算的权限系统原理和 Linux 文件系统权限的实例。</p>\n<p>上述的所有都有前提条件：1、每种权限码都是唯一的；2、每个权限码的二进制数形式，有且只有一位值为 1（2^n）。也就是说，权限码只能是 1, 2, 4, 8,…,1024,…而上文提到，一个数字的范围只能在 -(2^53 -1) 和 2^53 -1 之间，JavaScript 的按位操作符又是将其操作数当作 32 位比特序列的。那么同一个应用下可用的权限数就非常有限了。这也是该方案的局限性。<br>为了突破这个限制，这里提出一个叫“权限空间”的概念，既然权限数有限，那么不妨就多开辟几个空间来存放。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-内容概要\"><a href=\"#1-内容概要\" class=\"headerlink\" title=\"1,内容概要\"></a>1,内容概要</h1><ul>\n<li>JavaScript 的位运算：先简单回顾下位运算，平时用的少，相信不少人和我一样忘的差不多了</li>\n<li>权限设计：根据位运算的特点，设计一个权限系统（添加、删除、判断等）</li>\n</ul>\n<h1 id=\"2-JavaScript-位运算\"><a href=\"#2-JavaScript-位运算\" class=\"headerlink\" title=\"2.JavaScript 位运算\"></a>2.JavaScript 位运算</h1><h2 id=\"2-1-Number\"><a href=\"#2-1-Number\" class=\"headerlink\" title=\"2.1 Number\"></a>2.1 Number</h2><p>在讲位运算之前，首先简单看下JavaScript中的Number，下文需要用到</p>\n<p>在 JavaScript 里，数字均为基于 IEEE 754 标准的双精度 64 位的浮点数，引用维基百科的图片，它的结构长这样：<br><img src=\"/.99//ieee754.png\" alt=\"IEEE 754\">))</p>\n<h2 id=\"2-2位运算\"><a href=\"#2-2位运算\" class=\"headerlink\" title=\"2.2位运算\"></a>2.2位运算</h2><p>按位操作符将其操作数当作 32 位的比特序列（由 0 和 1 组成）操作，返回值依然是标准的 JavaScript 数值。JavaScript 中的按位操作符有：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>按位与 (AND)</td>\n<td>a &amp; b</td>\n<td>对于每一个比特位，只有两个操作数相应的特位都是 1 时，结果才为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位或（OR）</td>\n<td>a      | b</td>\n<td>对于每一个比特位，当两个操作数相应的比特位至少有一个 1 时，结果为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位异或（XOR）</td>\n<td>a ^ b</td>\n<td>对于每一个比特位，当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>按位非（NOT）</td>\n<td>~a</td>\n<td>反转操作数的比特位，即 0 变成 1，1 变成 0。</td>\n</tr>\n<tr>\n<td>左移（Left shift）</td>\n<td>a &lt;&lt; b</td>\n<td>将 a 的二进制形式向左移 b (&lt; 32) 比特位，右边用 0 填充。</td>\n</tr>\n<tr>\n<td>有符号右移</td>\n<td>a &gt;&gt; b</td>\n<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位。</td>\n</tr>\n<tr>\n<td>无符号右移</td>\n<td>a &gt;&gt;&gt; b</td>\n<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td>\n</tr>\n</tbody></table>\n<h3 id=\"下面举几个例子，主要看下-AND-和-OR：\"><a href=\"#下面举几个例子，主要看下-AND-和-OR：\" class=\"headerlink\" title=\"下面举几个例子，主要看下 AND 和 OR：\"></a>下面举几个例子，主要看下 AND 和 OR：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子1</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    B = 10010000</span><br><span class=\"line\">A | B = 10011001</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子2</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    C = 10001000</span><br><span class=\"line\">A | C = 10001001</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子1</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    B = 10010000</span><br><span class=\"line\">A &amp; B = 10000000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例子2</span></span><br><span class=\"line\">    A = 10001001</span><br><span class=\"line\">    C = 10001000</span><br><span class=\"line\">A &amp; C = 10001000</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-位运算在权限系统中的使用\"><a href=\"#3-位运算在权限系统中的使用\" class=\"headerlink\" title=\"3. 位运算在权限系统中的使用\"></a>3. 位运算在权限系统中的使用</h1><p>传统的权限系统里，存在很多关联关系，如用户和权限的关联，用户和角色的关联。系统越大，关联关系越多，越难以维护。而引入位运算，可以巧妙的解决该问题。</p>\n<p>在讲“位运算在权限系统中的使用”之前，我们先假定两个前提，下文所有的讨论都是基于这两个前提的：</p>\n<ol>\n<li>每种权限码都是唯一的（这是显然的）</li>\n<li>所有权限码的二进制数形式，有且只有一位值为 1，其余全部为 0（2^n）</li>\n</ol>\n<h4 id=\"如果用户权限和权限码，全部使用二级制数字表示，再结合上面-AND-和-OR-的例子，分析位运算的特点，不难发现：\"><a href=\"#如果用户权限和权限码，全部使用二级制数字表示，再结合上面-AND-和-OR-的例子，分析位运算的特点，不难发现：\" class=\"headerlink\" title=\"如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：\"></a>如果用户权限和权限码，全部使用二级制数字表示，再结合上面 AND 和 OR 的例子，分析位运算的特点，不难发现：</h4><ul>\n<li>| 可以用来赋予权限</li>\n<li>&amp; 可以用来校验权限</li>\n</ul>\n<h4 id=\"为了讲的更明白，这里用-Linux-中的实例分析下，Linux-的文件权限分为读、写和执行，有字母和数字等多种表现形式\"><a href=\"#为了讲的更明白，这里用-Linux-中的实例分析下，Linux-的文件权限分为读、写和执行，有字母和数字等多种表现形式\" class=\"headerlink\" title=\"为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式\"></a>为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式</h4><table>\n<thead>\n<tr>\n<th>权限</th>\n<th>字母表示</th>\n<th>数字表示</th>\n<th>二进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读</td>\n<td>r</td>\n<td>4</td>\n<td>0b100</td>\n</tr>\n<tr>\n<td>写</td>\n<td>w</td>\n<td>2</td>\n<td>0b010</td>\n</tr>\n<tr>\n<td>执行</td>\n<td>x</td>\n<td>1</td>\n<td>0b001</td>\n</tr>\n</tbody></table>\n<p>可以看到，权限用 1、2、4（也就是 2^n）表示，转换为二进制后，都是只有一位是 1，其余为 0。我们通过几个例子看下，如何利用二进制的特点执行权限的添加，校验和删除。</p>\n<h2 id=\"3-1-添加权限\"><a href=\"#3-1-添加权限\" class=\"headerlink\" title=\"3.1. 添加权限\"></a>3.1. 添加权限</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> r = <span class=\"number\">0b100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"number\">0b010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">0b001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给用户赋全部权限（使用前面讲的 | 操作）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = r | w | x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user)</span><br><span class=\"line\"><span class=\"comment\">// 7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.toString(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// 111</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     r = 0b100</span></span><br><span class=\"line\"><span class=\"comment\">//     w = 0b010</span></span><br><span class=\"line\"><span class=\"comment\">//     r = 0b001</span></span><br><span class=\"line\"><span class=\"comment\">// r|w|x = 0b111</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，执行 r | w | x 后，user 的三位都是 1，表明拥有了全部三个权限。</p>\n<blockquote>\n<p>Linux 下出现权限问题时，最粗暴的解决方案就是 chmod 777 xxx，这里的 7 就代表了：可读，可写，可执行。而三个 7 分别代表：文件所有者，文件所有者所在 组，所有其他用户。</p>\n</blockquote>\n<h3 id=\"3-3-校验权限\"><a href=\"#3-3-校验权限\" class=\"headerlink\" title=\"3.3 校验权限\"></a>3.3 校验权限</h3><p>刚才演示了权限的添加，下面演示权限校验：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> r = <span class=\"number\">0b100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"number\">0b010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">0b001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给用户赋 r w 两个权限</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = r | w</span><br><span class=\"line\"><span class=\"comment\">// user = 6</span></span><br><span class=\"line\"><span class=\"comment\">// user = 0b110 (二进制)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// true  有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br></pre></td></tr></table></figure>\n\n<p>如前所料，通过 用户权限 &amp; 权限 code === 权限 code 就可以判断出用户是否拥有该权限。</p>\n<h3 id=\"3-3删除权限\"><a href=\"#3-3删除权限\" class=\"headerlink\" title=\"3.3删除权限\"></a>3.3删除权限</h3><p>我们讲了用 | 赋予权限，使用 &amp; 判断权限，那么删除权限呢？删除权限的本质其实是将指定位置上的 1 重置为 0。上个例子里用户权限是 0b110，拥有读和写两个权限，现在想删除读的权限，本质上就是将第三位的 1 重置为 0，变为 0b010：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> r = <span class=\"number\">0b100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"number\">0b010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">0b001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"number\">0b010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// false 没有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br></pre></td></tr></table></figure>\n\n<p>那么具体怎么操作呢？其实有两种方案，最简单的就是异或 ^，按照上文的介绍“当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0”，所以异或其实是 toggle 操作，无则增，有则减：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> r    = <span class=\"number\">0b100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> w    = <span class=\"number\">0b010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x    = <span class=\"number\">0b001</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"number\">0b110</span> <span class=\"comment\">// 有 r w 两个权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行异或操作，删除 r 权限</span></span><br><span class=\"line\">user = user ^ r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// false 没有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.toString(<span class=\"number\">2</span>)) <span class=\"comment\">// 现在 user 是 0b010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再执行一次异或操作</span></span><br><span class=\"line\">user = user ^ r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// true  有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.toString(<span class=\"number\">2</span>)) <span class=\"comment\">// 现在 user 又变回 0b110</span></span><br></pre></td></tr></table></figure>\n\n<p>那么如果单纯的想删除权限（而不是无则增，有则减）怎么办呢？答案是执行 &amp;(~code)，先取反，再执行与操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> r    = <span class=\"number\">0b100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> w    = <span class=\"number\">0b010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x    = <span class=\"number\">0b001</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"number\">0b110</span> <span class=\"comment\">// 有 r w 两个权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除 r 权限</span></span><br><span class=\"line\">user = user &amp; (~r)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// false 没有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.toString(<span class=\"number\">2</span>)) <span class=\"comment\">// 现在 user 是 0b010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再执行一次</span></span><br><span class=\"line\">user = user &amp; (~r)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; r) === r) <span class=\"comment\">// false 没有 r 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; w) === w) <span class=\"comment\">// true  有 w 权限</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((user &amp; x) === x) <span class=\"comment\">// false 没有 x 权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.toString(<span class=\"number\">2</span>)) <span class=\"comment\">// 现在 user 还是 0b010，并不会新增</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-局限性和解决办法\"><a href=\"#4-局限性和解决办法\" class=\"headerlink\" title=\"4. 局限性和解决办法\"></a>4. 局限性和解决办法</h1><p>前面我们回顾了 JavaScript 中的 Number 和位运算，并且了解了基于位运算的权限系统原理和 Linux 文件系统权限的实例。</p>\n<p>上述的所有都有前提条件：1、每种权限码都是唯一的；2、每个权限码的二进制数形式，有且只有一位值为 1（2^n）。也就是说，权限码只能是 1, 2, 4, 8,…,1024,…而上文提到，一个数字的范围只能在 -(2^53 -1) 和 2^53 -1 之间，JavaScript 的按位操作符又是将其操作数当作 32 位比特序列的。那么同一个应用下可用的权限数就非常有限了。这也是该方案的局限性。<br>为了突破这个限制，这里提出一个叫“权限空间”的概念，既然权限数有限，那么不妨就多开辟几个空间来存放。</p>\n"},{"title":"执行上下文&变量对象","date":"2019-11-12T06:37:14.000Z","_content":"## 变量提升\n\n* 函数声明优先变量声明\n* 函数声明覆盖函数参数\n* 变量声明与函数参数共享声明（变量与函数参数重名事var忽略，let const报错）\n\n## 执行上下文栈\n\n### 创建执行上下文的场景\n1. 全局代码 -> 全局上下文\n2. 函数 -> 函数上下文\n3. eval ,new Function -> 动态上下文\n\n以栈的形式，先进后出，全局上下文为栈底.\n\n## 变量对象（VO）活动过对象（AO）\n\n* VO(变量对象), 也就是 variable object, 创建执行上下文时与之关联的会有一个变量对象，该上下文中的所有变量和函数全都保存在这个对象中。\n* AO(活动对象), 也就是``activation object`,进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问到，可以理解为被激活了。\n\n### 执行过程\n1. 创建阶段\n   1. 创建变量、参数、函数、arguments对象\n   2. 建立作用域链\n   3. 确定this的值\n2. 执行阶段\n   1. 变量复制，函数引用，执行代码\n\n在创建阶段，也就是代码执行之前\n此时的变量对象包括(如下顺序初始化):\n1. 函数的所有形参(仅在函数上下文): 没有实参, 属性值为undefined;\n2. 函数声明：如果变量对象已经存在相同名称的属性，则完全替换这个属性;\n3. 变量声明：如果变量名称跟已经声明的形参或函数相同，则变量声明不会干扰已经存在的这类属性\n\n#### 执行之前\n```js\nAO = {\n\targuments: {\n\t\t0: 1,\n\t\tlength: 1\n\t},\n\ta: 1,\n\tb: undefined,\n\tc: reference to function c() {},\n\td: undefined\n}\n```\n\n\n#### 代码执行\n```js\nAO = {\n  arguments: {\n  0: 1,\n  length: 1\n  },\n  a: 1,\n  b: 20,\n  c: reference to function c() {},\n  d: reference to function d() {}\n}\n```\n在此阶段, 前面的变量对象中的值就会被赋值了, 此时变量对象处于激活状态.","source":"_posts/执行上下文-变量对象.md","raw":"---\ntitle: 执行上下文&变量对象\ndate: 2019-11-12 14:37:14\ntags:\n---\n## 变量提升\n\n* 函数声明优先变量声明\n* 函数声明覆盖函数参数\n* 变量声明与函数参数共享声明（变量与函数参数重名事var忽略，let const报错）\n\n## 执行上下文栈\n\n### 创建执行上下文的场景\n1. 全局代码 -> 全局上下文\n2. 函数 -> 函数上下文\n3. eval ,new Function -> 动态上下文\n\n以栈的形式，先进后出，全局上下文为栈底.\n\n## 变量对象（VO）活动过对象（AO）\n\n* VO(变量对象), 也就是 variable object, 创建执行上下文时与之关联的会有一个变量对象，该上下文中的所有变量和函数全都保存在这个对象中。\n* AO(活动对象), 也就是``activation object`,进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问到，可以理解为被激活了。\n\n### 执行过程\n1. 创建阶段\n   1. 创建变量、参数、函数、arguments对象\n   2. 建立作用域链\n   3. 确定this的值\n2. 执行阶段\n   1. 变量复制，函数引用，执行代码\n\n在创建阶段，也就是代码执行之前\n此时的变量对象包括(如下顺序初始化):\n1. 函数的所有形参(仅在函数上下文): 没有实参, 属性值为undefined;\n2. 函数声明：如果变量对象已经存在相同名称的属性，则完全替换这个属性;\n3. 变量声明：如果变量名称跟已经声明的形参或函数相同，则变量声明不会干扰已经存在的这类属性\n\n#### 执行之前\n```js\nAO = {\n\targuments: {\n\t\t0: 1,\n\t\tlength: 1\n\t},\n\ta: 1,\n\tb: undefined,\n\tc: reference to function c() {},\n\td: undefined\n}\n```\n\n\n#### 代码执行\n```js\nAO = {\n  arguments: {\n  0: 1,\n  length: 1\n  },\n  a: 1,\n  b: 20,\n  c: reference to function c() {},\n  d: reference to function d() {}\n}\n```\n在此阶段, 前面的变量对象中的值就会被赋值了, 此时变量对象处于激活状态.","slug":"执行上下文-变量对象","published":1,"updated":"2019-11-14T03:22:05.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck54n2yix0003jigjemcjc72x","content":"<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><ul>\n<li>函数声明优先变量声明</li>\n<li>函数声明覆盖函数参数</li>\n<li>变量声明与函数参数共享声明（变量与函数参数重名事var忽略，let const报错）</li>\n</ul>\n<h2 id=\"执行上下文栈\"><a href=\"#执行上下文栈\" class=\"headerlink\" title=\"执行上下文栈\"></a>执行上下文栈</h2><h3 id=\"创建执行上下文的场景\"><a href=\"#创建执行上下文的场景\" class=\"headerlink\" title=\"创建执行上下文的场景\"></a>创建执行上下文的场景</h3><ol>\n<li>全局代码 -&gt; 全局上下文</li>\n<li>函数 -&gt; 函数上下文</li>\n<li>eval ,new Function -&gt; 动态上下文</li>\n</ol>\n<p>以栈的形式，先进后出，全局上下文为栈底.</p>\n<h2 id=\"变量对象（VO）活动过对象（AO）\"><a href=\"#变量对象（VO）活动过对象（AO）\" class=\"headerlink\" title=\"变量对象（VO）活动过对象（AO）\"></a>变量对象（VO）活动过对象（AO）</h2><ul>\n<li>VO(变量对象), 也就是 variable object, 创建执行上下文时与之关联的会有一个变量对象，该上下文中的所有变量和函数全都保存在这个对象中。</li>\n<li>AO(活动对象), 也就是``activation object`,进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问到，可以理解为被激活了。</li>\n</ul>\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><ol>\n<li>创建阶段<ol>\n<li>创建变量、参数、函数、arguments对象</li>\n<li>建立作用域链</li>\n<li>确定this的值</li>\n</ol>\n</li>\n<li>执行阶段<ol>\n<li>变量复制，函数引用，执行代码</li>\n</ol>\n</li>\n</ol>\n<p>在创建阶段，也就是代码执行之前<br>此时的变量对象包括(如下顺序初始化):</p>\n<ol>\n<li>函数的所有形参(仅在函数上下文): 没有实参, 属性值为undefined;</li>\n<li>函数声明：如果变量对象已经存在相同名称的属性，则完全替换这个属性;</li>\n<li>变量声明：如果变量名称跟已经声明的形参或函数相同，则变量声明不会干扰已经存在的这类属性</li>\n</ol>\n<h4 id=\"执行之前\"><a href=\"#执行之前\" class=\"headerlink\" title=\"执行之前\"></a>执行之前</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AO = &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">arguments</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tlength: <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\ta: <span class=\"number\">1</span>,</span><br><span class=\"line\">\tb: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">\tc: reference to <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">\td: <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"代码执行\"><a href=\"#代码执行\" class=\"headerlink\" title=\"代码执行\"></a>代码执行</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AO = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">arguments</span>: &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  length: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: <span class=\"number\">20</span>,</span><br><span class=\"line\">  c: reference to <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  d: reference to <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在此阶段, 前面的变量对象中的值就会被赋值了, 此时变量对象处于激活状态.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><ul>\n<li>函数声明优先变量声明</li>\n<li>函数声明覆盖函数参数</li>\n<li>变量声明与函数参数共享声明（变量与函数参数重名事var忽略，let const报错）</li>\n</ul>\n<h2 id=\"执行上下文栈\"><a href=\"#执行上下文栈\" class=\"headerlink\" title=\"执行上下文栈\"></a>执行上下文栈</h2><h3 id=\"创建执行上下文的场景\"><a href=\"#创建执行上下文的场景\" class=\"headerlink\" title=\"创建执行上下文的场景\"></a>创建执行上下文的场景</h3><ol>\n<li>全局代码 -&gt; 全局上下文</li>\n<li>函数 -&gt; 函数上下文</li>\n<li>eval ,new Function -&gt; 动态上下文</li>\n</ol>\n<p>以栈的形式，先进后出，全局上下文为栈底.</p>\n<h2 id=\"变量对象（VO）活动过对象（AO）\"><a href=\"#变量对象（VO）活动过对象（AO）\" class=\"headerlink\" title=\"变量对象（VO）活动过对象（AO）\"></a>变量对象（VO）活动过对象（AO）</h2><ul>\n<li>VO(变量对象), 也就是 variable object, 创建执行上下文时与之关联的会有一个变量对象，该上下文中的所有变量和函数全都保存在这个对象中。</li>\n<li>AO(活动对象), 也就是``activation object`,进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问到，可以理解为被激活了。</li>\n</ul>\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><ol>\n<li>创建阶段<ol>\n<li>创建变量、参数、函数、arguments对象</li>\n<li>建立作用域链</li>\n<li>确定this的值</li>\n</ol>\n</li>\n<li>执行阶段<ol>\n<li>变量复制，函数引用，执行代码</li>\n</ol>\n</li>\n</ol>\n<p>在创建阶段，也就是代码执行之前<br>此时的变量对象包括(如下顺序初始化):</p>\n<ol>\n<li>函数的所有形参(仅在函数上下文): 没有实参, 属性值为undefined;</li>\n<li>函数声明：如果变量对象已经存在相同名称的属性，则完全替换这个属性;</li>\n<li>变量声明：如果变量名称跟已经声明的形参或函数相同，则变量声明不会干扰已经存在的这类属性</li>\n</ol>\n<h4 id=\"执行之前\"><a href=\"#执行之前\" class=\"headerlink\" title=\"执行之前\"></a>执行之前</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AO = &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">arguments</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tlength: <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\ta: <span class=\"number\">1</span>,</span><br><span class=\"line\">\tb: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">\tc: reference to <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">\td: <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"代码执行\"><a href=\"#代码执行\" class=\"headerlink\" title=\"代码执行\"></a>代码执行</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AO = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">arguments</span>: &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  length: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: <span class=\"number\">20</span>,</span><br><span class=\"line\">  c: reference to <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  d: reference to <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在此阶段, 前面的变量对象中的值就会被赋值了, 此时变量对象处于激活状态.</p>\n"},{"title":"手写js实现","date":"2019-11-21T08:20:36.000Z","_content":"## 1.setTimeout模拟setInterval\n```js\nlet index = 1\nlet cache = new Map()\nconst mySetInterval = function (fn, time = 0, ...args) {\n  let i = index++\n  cache.set(i, setTimeout(() => {\n    fn.call(this, ...args)\n    run()\n  }, time))\n  const run = () => {\n    if (cache.get(i)) {\n      cache.set(i, setTimeout(() => {\n        fn.call(this, ...args)\n        run()\n      }, time))\n    }\n  }\n  return i\n}\nconst myClearInterval = function (number) {\n  clearTimeout(cache[number])\n  cache.delete(number)\n}\nconst i = mySetInterval(function () {\n  console.log(arguments)\n}, 1000, 1, 2, 3, 4)\n```\n**注意:**\n1. setTimeout不支持多个参数(3个以上),setInterval支持\n2. setTimeout,Node平台返回的是Timeout对象，浏览器是数字，经测试最小为1\n\n## Object.create\n```js\nObject.myCreate = function (proto, des) {\n  if (!(proto instanceof Object || proto === null)) {\n    throw new TypeError(`Object prototype may only be an Object or null: ${proto}`)\n  }\n  const fn = function () { }\n  fn.prototype = proto\n  const o = new fn()\n  if (des) {\n    Object.defineProperties(o, des)\n  }\n  return o\n}\nconst obj = Object.myCreate({}, {\n  value: {\n    value: 123\n  }\n})\nconsole.log(obj.value) // 123\n```\n\n### call,apply,bind\n```js\nFunction.prototype.mycall = function (obj) {\n  const args = []\n  for (let i = 1; i < arguments.length; i++) {\n    args.push(`arguments[${i}]`)\n  }\n  if (obj === undefined) {\n    obj = typeof window !== 'undefined' ? window : global\n\n  }\n  if (typeof obj !== 'object') {\n    obj = Object(obj)\n  }\n  obj.fn = this\n  const result = eval(`obj.fn(${args})`)\n  delete obj.fn\n  return result\n}\n\nFunction.prototype.myapply = function (obj, arg) {\n  if (arg) {\n    if (arg.length === undefined) {\n      throw new TypeError('TypeError: CreateListFromArrayLike called on non-object')\n    }\n  }\n  const args = []\n  for (let i = 0; i < arg.length; i++) {\n    args.push(`arg[${i}]`)\n  }\n  if (obj === undefined) {\n    obj = typeof window !== 'undefined' ? window : global\n\n  }\n  if (typeof obj !== 'object') {\n    obj = Object(obj)\n  }\n  obj.fn = this\n  const result = eval(`obj.fn(${args})`)\n  delete obj.fn\n  return result\n}\n\nFunction.prototype.mybind = function (context) {\n  const self = this\n  if (context === undefined) {\n    context = window\n  }\n  if (typeof context !== 'object') {\n    context = Object(context)\n  }\n  const args = [].slice.call(arguments, 1)\n  const fn = function () {\n    const args2 = [].slice.call(arguments)\n    return self.apply(this instanceof self ? this : context, args.concat(args2))\n  }\n  fn.prototype = Object.create(this.prototype)\n  return fn\n}\n\n```\n\n**注意**\n\n1. 使用了一个eval，因为处理参数还是需要...es5还是需要call，apply表示\n2. bind就有一个this问题\n3. 基本类型会包装成Object，貌似很多文章没有，这里也是测试出来的\n\n### 深拷贝\n```js\nconst clone = function (obj, set = new Set()) {\n  // 考虑循环引用\n  if (set.has(obj)) {\n    return obj\n  }\n  if (typeof obj !== 'object') {\n    return obj\n  }\n  set.add(obj)\n  if (Array.isArray(obj)) {\n    let res = []\n    for (let i = 0; i < obj.length; i++) {\n      res[i] = clone(obj[i], set)\n    }\n    return res\n  } else if (Object.prototype.toString.call(obj) === '[object RegExp]') {\n    return new RegExp(obj.source, obj.flags)\n  } else {\n    let res = {}\n    for (let key in obj) {\n      if (Object.hasOwnProperty.call(obj, key)) {\n        res[key] = clone(obj[key], set)\n      }\n    }\n    return res\n  }\n}\n```\n**实现的一般，也够用了**\n\n### 继承\n```js\n// 方法一\nfunction SuperClass(name) {\n  this.name = name\n}\nfunction SubClass(name, age) {\n  SuperClass.apply(this, arguments)\n  this.age = age\n}\nSubClass.prototype = Object.create(SuperClass.prototype)\nSubClass.prototype.constructor = SubClass\n```\n```js\n// 方法二\nfunction _inherits(subClass, superClass) {  // babel模拟es6\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n  if (superClass) Object.setPrototypeOf(subClass, superClass)\n}\n```\n\n### 手写jsonp\n```js\nfunction jsonp(obj) {\n  const { url, data } = obj;\n  if (!url) return\n  return new Promise((resolve, reject) => {\n    const cbFn = `jsonp_${Date.now()}`\n    data.callback = cbFn\n    const head = document.querySelector('head')\n    const script = document.createElement('script')\n    const src = `${url}?${data2Url(data)}`\n    script.src = src\n    head.appendChild(script)\n\n    window[cbFn] = function (res) {\n      res ? resolve(res) : reject('error')\n      head.removeChild(script)\n      window[cbFn] = null\n    }\n  })\n}\n\nfunction data2Url(data) {\n  return Object.keys(data).reduce((acc, cur) => {\n    acc.push(`${cur}=${data[cur]}`)\n    return acc\n  }, []).join('&')\n}\n// jsonp({url:'www.xxx.com',data:{a:1,b:2}})\\\n```\n\n### 转为二维数组\n```js\nlet count = 32\nlet arr = []\nwhile (count > 0) {\n  arr.unshift(count--)\n}\nconst toTwoMatrix = (arr, scale = 4) => {\n  for (let i = 0; i < arr.length; i++) {\n    const first = Math.floor(i / scale)\n    const second = i % scale\n    if (second !== 0) {\n      arr[first][second] = arr[i]\n    } else {\n      arr[first] = [arr[i]]\n    }\n  }\n  arr.length = Math.ceil(arr.length / 4)\n  return arr\n}\n```","source":"_posts/手写js实现.md","raw":"---\ntitle: 手写js实现\ndate: 2019-11-21 16:20:36\ntags:\n---\n## 1.setTimeout模拟setInterval\n```js\nlet index = 1\nlet cache = new Map()\nconst mySetInterval = function (fn, time = 0, ...args) {\n  let i = index++\n  cache.set(i, setTimeout(() => {\n    fn.call(this, ...args)\n    run()\n  }, time))\n  const run = () => {\n    if (cache.get(i)) {\n      cache.set(i, setTimeout(() => {\n        fn.call(this, ...args)\n        run()\n      }, time))\n    }\n  }\n  return i\n}\nconst myClearInterval = function (number) {\n  clearTimeout(cache[number])\n  cache.delete(number)\n}\nconst i = mySetInterval(function () {\n  console.log(arguments)\n}, 1000, 1, 2, 3, 4)\n```\n**注意:**\n1. setTimeout不支持多个参数(3个以上),setInterval支持\n2. setTimeout,Node平台返回的是Timeout对象，浏览器是数字，经测试最小为1\n\n## Object.create\n```js\nObject.myCreate = function (proto, des) {\n  if (!(proto instanceof Object || proto === null)) {\n    throw new TypeError(`Object prototype may only be an Object or null: ${proto}`)\n  }\n  const fn = function () { }\n  fn.prototype = proto\n  const o = new fn()\n  if (des) {\n    Object.defineProperties(o, des)\n  }\n  return o\n}\nconst obj = Object.myCreate({}, {\n  value: {\n    value: 123\n  }\n})\nconsole.log(obj.value) // 123\n```\n\n### call,apply,bind\n```js\nFunction.prototype.mycall = function (obj) {\n  const args = []\n  for (let i = 1; i < arguments.length; i++) {\n    args.push(`arguments[${i}]`)\n  }\n  if (obj === undefined) {\n    obj = typeof window !== 'undefined' ? window : global\n\n  }\n  if (typeof obj !== 'object') {\n    obj = Object(obj)\n  }\n  obj.fn = this\n  const result = eval(`obj.fn(${args})`)\n  delete obj.fn\n  return result\n}\n\nFunction.prototype.myapply = function (obj, arg) {\n  if (arg) {\n    if (arg.length === undefined) {\n      throw new TypeError('TypeError: CreateListFromArrayLike called on non-object')\n    }\n  }\n  const args = []\n  for (let i = 0; i < arg.length; i++) {\n    args.push(`arg[${i}]`)\n  }\n  if (obj === undefined) {\n    obj = typeof window !== 'undefined' ? window : global\n\n  }\n  if (typeof obj !== 'object') {\n    obj = Object(obj)\n  }\n  obj.fn = this\n  const result = eval(`obj.fn(${args})`)\n  delete obj.fn\n  return result\n}\n\nFunction.prototype.mybind = function (context) {\n  const self = this\n  if (context === undefined) {\n    context = window\n  }\n  if (typeof context !== 'object') {\n    context = Object(context)\n  }\n  const args = [].slice.call(arguments, 1)\n  const fn = function () {\n    const args2 = [].slice.call(arguments)\n    return self.apply(this instanceof self ? this : context, args.concat(args2))\n  }\n  fn.prototype = Object.create(this.prototype)\n  return fn\n}\n\n```\n\n**注意**\n\n1. 使用了一个eval，因为处理参数还是需要...es5还是需要call，apply表示\n2. bind就有一个this问题\n3. 基本类型会包装成Object，貌似很多文章没有，这里也是测试出来的\n\n### 深拷贝\n```js\nconst clone = function (obj, set = new Set()) {\n  // 考虑循环引用\n  if (set.has(obj)) {\n    return obj\n  }\n  if (typeof obj !== 'object') {\n    return obj\n  }\n  set.add(obj)\n  if (Array.isArray(obj)) {\n    let res = []\n    for (let i = 0; i < obj.length; i++) {\n      res[i] = clone(obj[i], set)\n    }\n    return res\n  } else if (Object.prototype.toString.call(obj) === '[object RegExp]') {\n    return new RegExp(obj.source, obj.flags)\n  } else {\n    let res = {}\n    for (let key in obj) {\n      if (Object.hasOwnProperty.call(obj, key)) {\n        res[key] = clone(obj[key], set)\n      }\n    }\n    return res\n  }\n}\n```\n**实现的一般，也够用了**\n\n### 继承\n```js\n// 方法一\nfunction SuperClass(name) {\n  this.name = name\n}\nfunction SubClass(name, age) {\n  SuperClass.apply(this, arguments)\n  this.age = age\n}\nSubClass.prototype = Object.create(SuperClass.prototype)\nSubClass.prototype.constructor = SubClass\n```\n```js\n// 方法二\nfunction _inherits(subClass, superClass) {  // babel模拟es6\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n  if (superClass) Object.setPrototypeOf(subClass, superClass)\n}\n```\n\n### 手写jsonp\n```js\nfunction jsonp(obj) {\n  const { url, data } = obj;\n  if (!url) return\n  return new Promise((resolve, reject) => {\n    const cbFn = `jsonp_${Date.now()}`\n    data.callback = cbFn\n    const head = document.querySelector('head')\n    const script = document.createElement('script')\n    const src = `${url}?${data2Url(data)}`\n    script.src = src\n    head.appendChild(script)\n\n    window[cbFn] = function (res) {\n      res ? resolve(res) : reject('error')\n      head.removeChild(script)\n      window[cbFn] = null\n    }\n  })\n}\n\nfunction data2Url(data) {\n  return Object.keys(data).reduce((acc, cur) => {\n    acc.push(`${cur}=${data[cur]}`)\n    return acc\n  }, []).join('&')\n}\n// jsonp({url:'www.xxx.com',data:{a:1,b:2}})\\\n```\n\n### 转为二维数组\n```js\nlet count = 32\nlet arr = []\nwhile (count > 0) {\n  arr.unshift(count--)\n}\nconst toTwoMatrix = (arr, scale = 4) => {\n  for (let i = 0; i < arr.length; i++) {\n    const first = Math.floor(i / scale)\n    const second = i % scale\n    if (second !== 0) {\n      arr[first][second] = arr[i]\n    } else {\n      arr[first] = [arr[i]]\n    }\n  }\n  arr.length = Math.ceil(arr.length / 4)\n  return arr\n}\n```","slug":"手写js实现","published":1,"updated":"2020-01-14T07:26:41.183Z","_id":"ck54n2yiy0004jigj2euzhnx1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-setTimeout模拟setInterval\"><a href=\"#1-setTimeout模拟setInterval\" class=\"headerlink\" title=\"1.setTimeout模拟setInterval\"></a>1.setTimeout模拟setInterval</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cache = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> mySetInterval = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn, time = <span class=\"number\">0</span>, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = index++</span><br><span class=\"line\">  cache.set(i, setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fn.call(<span class=\"keyword\">this</span>, ...args)</span><br><span class=\"line\">    run()</span><br><span class=\"line\">  &#125;, time))</span><br><span class=\"line\">  <span class=\"keyword\">const</span> run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache.get(i)) &#123;</span><br><span class=\"line\">      cache.set(i, setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        fn.call(<span class=\"keyword\">this</span>, ...args)</span><br><span class=\"line\">        run()</span><br><span class=\"line\">      &#125;, time))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myClearInterval = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">  clearTimeout(cache[number])</span><br><span class=\"line\">  cache.delete(number)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> i = mySetInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>注意:</strong></p>\n<ol>\n<li>setTimeout不支持多个参数(3个以上),setInterval支持</li>\n<li>setTimeout,Node平台返回的是Timeout对象，浏览器是数字，经测试最小为1</li>\n</ol>\n<h2 id=\"Object-create\"><a href=\"#Object-create\" class=\"headerlink\" title=\"Object.create\"></a>Object.create</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.myCreate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">proto, des</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(proto <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> || proto === <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`Object prototype may only be an Object or null: <span class=\"subst\">$&#123;proto&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">  fn.prototype = proto</span><br><span class=\"line\">  <span class=\"keyword\">const</span> o = <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (des) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperties(o, des)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.myCreate(&#123;&#125;, &#123;</span><br><span class=\"line\">  value: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">123</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.value) <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"call-apply-bind\"><a href=\"#call-apply-bind\" class=\"headerlink\" title=\"call,apply,bind\"></a>call,apply,bind</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mycall = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">    args.push(<span class=\"string\">`arguments[<span class=\"subst\">$&#123;i&#125;</span>]`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    obj = <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> ? <span class=\"built_in\">window</span> : global</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    obj = <span class=\"built_in\">Object</span>(obj)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  obj.fn = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">`obj.fn(<span class=\"subst\">$&#123;args&#125;</span>)`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> obj.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myapply = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arg) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arg.length === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'TypeError: CreateListFromArrayLike called on non-object'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arg.length; i++) &#123;</span><br><span class=\"line\">    args.push(<span class=\"string\">`arg[<span class=\"subst\">$&#123;i&#125;</span>]`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    obj = <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> ? <span class=\"built_in\">window</span> : global</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    obj = <span class=\"built_in\">Object</span>(obj)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  obj.fn = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">`obj.fn(<span class=\"subst\">$&#123;args&#125;</span>)`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> obj.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (context === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    context = <span class=\"built_in\">window</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> context !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    context = <span class=\"built_in\">Object</span>(context)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args2 = [].slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.apply(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> self ? <span class=\"keyword\">this</span> : context, args.concat(args2))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fn.prototype = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>.prototype)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ol>\n<li>使用了一个eval，因为处理参数还是需要…es5还是需要call，apply表示</li>\n<li>bind就有一个this问题</li>\n<li>基本类型会包装成Object，貌似很多文章没有，这里也是测试出来的</li>\n</ol>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, set = new Set(</span>)) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 考虑循环引用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">set</span>.has(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(obj)</span><br><span class=\"line\">  if (Array.isArray(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class=\"line\">      res[i] = clone(obj[i], <span class=\"keyword\">set</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res</span><br><span class=\"line\">  &#125; else if (Object.prototype.toString.call(obj) === '[object RegExp]') &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(obj.source, obj.flags)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.hasOwnProperty.call(obj, key)) &#123;</span><br><span class=\"line\">        res[key] = clone(obj[key], <span class=\"keyword\">set</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>实现的一般，也够用了</strong></p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperClass</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  SuperClass.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SubClass.prototype = <span class=\"built_in\">Object</span>.create(SuperClass.prototype)</span><br><span class=\"line\">SubClass.prototype.constructor = SubClass</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_inherits</span>(<span class=\"params\">subClass, superClass</span>) </span>&#123;  <span class=\"comment\">// babel模拟es6</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> superClass !== <span class=\"string\">\"function\"</span> &amp;&amp; superClass !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Super expression must either be null or a function\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  subClass.prototype = <span class=\"built_in\">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123; <span class=\"attr\">constructor</span>: &#123; <span class=\"attr\">value</span>: subClass, <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span> &#125; &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (superClass) <span class=\"built_in\">Object</span>.setPrototypeOf(subClass, superClass)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写jsonp\"><a href=\"#手写jsonp\" class=\"headerlink\" title=\"手写jsonp\"></a>手写jsonp</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; url, data &#125; = obj;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!url) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cbFn = <span class=\"string\">`jsonp_<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span></span><br><span class=\"line\">    data.callback = cbFn</span><br><span class=\"line\">    <span class=\"keyword\">const</span> head = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'head'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> src = <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>?<span class=\"subst\">$&#123;data2Url(data)&#125;</span>`</span></span><br><span class=\"line\">    script.src = src</span><br><span class=\"line\">    head.appendChild(script)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>[cbFn] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      res ? resolve(res) : reject(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">      head.removeChild(script)</span><br><span class=\"line\">      <span class=\"built_in\">window</span>[cbFn] = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data2Url</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(data).reduce(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    acc.push(<span class=\"string\">`<span class=\"subst\">$&#123;cur&#125;</span>=<span class=\"subst\">$&#123;data[cur]&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc</span><br><span class=\"line\">  &#125;, []).join(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// jsonp(&#123;url:'www.xxx.com',data:&#123;a:1,b:2&#125;&#125;)\\</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转为二维数组\"><a href=\"#转为二维数组\" class=\"headerlink\" title=\"转为二维数组\"></a>转为二维数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  arr.unshift(count--)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> toTwoMatrix = <span class=\"function\">(<span class=\"params\">arr, scale = <span class=\"number\">4</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> first = <span class=\"built_in\">Math</span>.floor(i / scale)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> second = i % scale</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (second !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      arr[first][second] = arr[i]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      arr[first] = [arr[i]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  arr.length = <span class=\"built_in\">Math</span>.ceil(arr.length / <span class=\"number\">4</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-setTimeout模拟setInterval\"><a href=\"#1-setTimeout模拟setInterval\" class=\"headerlink\" title=\"1.setTimeout模拟setInterval\"></a>1.setTimeout模拟setInterval</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cache = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> mySetInterval = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn, time = <span class=\"number\">0</span>, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = index++</span><br><span class=\"line\">  cache.set(i, setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fn.call(<span class=\"keyword\">this</span>, ...args)</span><br><span class=\"line\">    run()</span><br><span class=\"line\">  &#125;, time))</span><br><span class=\"line\">  <span class=\"keyword\">const</span> run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache.get(i)) &#123;</span><br><span class=\"line\">      cache.set(i, setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        fn.call(<span class=\"keyword\">this</span>, ...args)</span><br><span class=\"line\">        run()</span><br><span class=\"line\">      &#125;, time))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myClearInterval = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">  clearTimeout(cache[number])</span><br><span class=\"line\">  cache.delete(number)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> i = mySetInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>注意:</strong></p>\n<ol>\n<li>setTimeout不支持多个参数(3个以上),setInterval支持</li>\n<li>setTimeout,Node平台返回的是Timeout对象，浏览器是数字，经测试最小为1</li>\n</ol>\n<h2 id=\"Object-create\"><a href=\"#Object-create\" class=\"headerlink\" title=\"Object.create\"></a>Object.create</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.myCreate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">proto, des</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(proto <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> || proto === <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`Object prototype may only be an Object or null: <span class=\"subst\">$&#123;proto&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">  fn.prototype = proto</span><br><span class=\"line\">  <span class=\"keyword\">const</span> o = <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (des) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperties(o, des)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.myCreate(&#123;&#125;, &#123;</span><br><span class=\"line\">  value: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">123</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.value) <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"call-apply-bind\"><a href=\"#call-apply-bind\" class=\"headerlink\" title=\"call,apply,bind\"></a>call,apply,bind</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mycall = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">    args.push(<span class=\"string\">`arguments[<span class=\"subst\">$&#123;i&#125;</span>]`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    obj = <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> ? <span class=\"built_in\">window</span> : global</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    obj = <span class=\"built_in\">Object</span>(obj)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  obj.fn = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">`obj.fn(<span class=\"subst\">$&#123;args&#125;</span>)`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> obj.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myapply = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arg) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arg.length === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'TypeError: CreateListFromArrayLike called on non-object'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arg.length; i++) &#123;</span><br><span class=\"line\">    args.push(<span class=\"string\">`arg[<span class=\"subst\">$&#123;i&#125;</span>]`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    obj = <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> ? <span class=\"built_in\">window</span> : global</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    obj = <span class=\"built_in\">Object</span>(obj)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  obj.fn = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">`obj.fn(<span class=\"subst\">$&#123;args&#125;</span>)`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> obj.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (context === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    context = <span class=\"built_in\">window</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> context !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    context = <span class=\"built_in\">Object</span>(context)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args2 = [].slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.apply(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> self ? <span class=\"keyword\">this</span> : context, args.concat(args2))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fn.prototype = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>.prototype)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ol>\n<li>使用了一个eval，因为处理参数还是需要…es5还是需要call，apply表示</li>\n<li>bind就有一个this问题</li>\n<li>基本类型会包装成Object，貌似很多文章没有，这里也是测试出来的</li>\n</ol>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, set = new Set(</span>)) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 考虑循环引用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">set</span>.has(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>.add(obj)</span><br><span class=\"line\">  if (Array.isArray(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class=\"line\">      res[i] = clone(obj[i], <span class=\"keyword\">set</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res</span><br><span class=\"line\">  &#125; else if (Object.prototype.toString.call(obj) === '[object RegExp]') &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(obj.source, obj.flags)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.hasOwnProperty.call(obj, key)) &#123;</span><br><span class=\"line\">        res[key] = clone(obj[key], <span class=\"keyword\">set</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>实现的一般，也够用了</strong></p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperClass</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  SuperClass.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SubClass.prototype = <span class=\"built_in\">Object</span>.create(SuperClass.prototype)</span><br><span class=\"line\">SubClass.prototype.constructor = SubClass</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_inherits</span>(<span class=\"params\">subClass, superClass</span>) </span>&#123;  <span class=\"comment\">// babel模拟es6</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> superClass !== <span class=\"string\">\"function\"</span> &amp;&amp; superClass !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Super expression must either be null or a function\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  subClass.prototype = <span class=\"built_in\">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123; <span class=\"attr\">constructor</span>: &#123; <span class=\"attr\">value</span>: subClass, <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span> &#125; &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (superClass) <span class=\"built_in\">Object</span>.setPrototypeOf(subClass, superClass)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写jsonp\"><a href=\"#手写jsonp\" class=\"headerlink\" title=\"手写jsonp\"></a>手写jsonp</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; url, data &#125; = obj;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!url) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cbFn = <span class=\"string\">`jsonp_<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span></span><br><span class=\"line\">    data.callback = cbFn</span><br><span class=\"line\">    <span class=\"keyword\">const</span> head = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'head'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> src = <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>?<span class=\"subst\">$&#123;data2Url(data)&#125;</span>`</span></span><br><span class=\"line\">    script.src = src</span><br><span class=\"line\">    head.appendChild(script)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>[cbFn] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      res ? resolve(res) : reject(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">      head.removeChild(script)</span><br><span class=\"line\">      <span class=\"built_in\">window</span>[cbFn] = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data2Url</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(data).reduce(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    acc.push(<span class=\"string\">`<span class=\"subst\">$&#123;cur&#125;</span>=<span class=\"subst\">$&#123;data[cur]&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc</span><br><span class=\"line\">  &#125;, []).join(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// jsonp(&#123;url:'www.xxx.com',data:&#123;a:1,b:2&#125;&#125;)\\</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转为二维数组\"><a href=\"#转为二维数组\" class=\"headerlink\" title=\"转为二维数组\"></a>转为二维数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  arr.unshift(count--)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> toTwoMatrix = <span class=\"function\">(<span class=\"params\">arr, scale = <span class=\"number\">4</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> first = <span class=\"built_in\">Math</span>.floor(i / scale)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> second = i % scale</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (second !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      arr[first][second] = arr[i]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      arr[first] = [arr[i]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  arr.length = <span class=\"built_in\">Math</span>.ceil(arr.length / <span class=\"number\">4</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}